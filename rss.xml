<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Blog by Nahid Saikat]]></title><description><![CDATA[Pythonista | JavaScripter | Software Engineer | Reader]]></description><link>https://www.nahidsaikat.com/</link><generator>RSS for Node</generator><lastBuildDate>Wed, 19 Jun 2019 16:26:14 GMT</lastBuildDate><item><title><![CDATA[Oracle PL/SQL Case Statement]]></title><description><![CDATA[Oracle PL/SQL provides case statement control which is used in decision making. It has similarities with the IF statement control of PL/SQL. In case statement there is a selector, ]]></description><link>https://www.nahidsaikat.com//blog/2018/02/28/oracle-pl-sql-case-statement/</link><guid isPermaLink="false">https://www.nahidsaikat.com//blog/2018/02/28/oracle-pl-sql-case-statement/</guid><pubDate>Wed, 28 Feb 2018 22:12:03 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;/media/pixabay/case-statement.jpg&quot; alt=&quot;PL/SQL Case Statement&quot; title=&quot;PL/SQL Case Statement&quot;&gt;
&lt;a href=&quot;https://pixabay.com/photos/branch-sunset-nature-tree-sunlight-1753745/&quot;&gt;&lt;center&gt;&lt;span style=&quot;color:black&quot;&gt;Image Source&lt;/span&gt;&lt;/center&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Simple Case Statement&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Oracle PL/SQL provides case statement control which is used in decision making. It has similarities with the IF statement control of PL/SQL. In case statement there is a selector, based on the evaluated value of the selector a block of statement will be executed. The selector will be executed only once. General form of simple case statement is follow.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;CASE&lt;/span&gt; selector
    &lt;span class=&quot;token constant&quot;&gt;WHEN&lt;/span&gt; expression_1 &lt;span class=&quot;token constant&quot;&gt;THEN&lt;/span&gt;
        block_of_statements_1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token constant&quot;&gt;WHEN&lt;/span&gt; expression_2 &lt;span class=&quot;token constant&quot;&gt;THEN&lt;/span&gt;
        block_of_statements_2&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;token constant&quot;&gt;WHEN&lt;/span&gt; expression_n &lt;span class=&quot;token constant&quot;&gt;THEN&lt;/span&gt;
        block_of_statements_n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token constant&quot;&gt;ELSE&lt;/span&gt;
        block_of_else_statement
&lt;span class=&quot;token keyword&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;CASE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Case statements begins with the keyword CASE followed by a selector. After that a sequence of WHEN statements. WHEN statement begins with the WHEN keyword followed by a expression which returns a value. If selector value and WHEN expression value matched then block of statements after THEN keyword will be executed. After execution of the block of statement execution control will pass to the end of the case statement. Following is an example that prints a message based on the grade of a student. Point to be noted here that the selector can contains any data types other then BLOB, BFILE and composite types.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;CASE&lt;/span&gt; grade
    &lt;span class=&quot;token constant&quot;&gt;WHEN&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;A&apos;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;THEN&lt;/span&gt; dbms_output&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;put_line&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;‘&lt;span class=&quot;token constant&quot;&gt;Excellent!&lt;/span&gt;’&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token constant&quot;&gt;WHEN&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;B&apos;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;THEN&lt;/span&gt; dbms_output&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;put_line&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;‘&lt;span class=&quot;token constant&quot;&gt;Very&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Good!&lt;/span&gt;’&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token constant&quot;&gt;WHEN&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;C&apos;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;THEN&lt;/span&gt; dbms_output&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;put_line&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;‘&lt;span class=&quot;token constant&quot;&gt;Well&lt;/span&gt; done&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;’&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token constant&quot;&gt;WHEN&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;D&apos;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;THEN&lt;/span&gt; dbms_output&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;put_line&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;‘&lt;span class=&quot;token constant&quot;&gt;You&lt;/span&gt; have passed&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;’&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token constant&quot;&gt;WHEN&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;F&apos;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;THEN&lt;/span&gt; dbms_output&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;put_line&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;‘&lt;span class=&quot;token constant&quot;&gt;You&lt;/span&gt; have failed&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;’&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token constant&quot;&gt;ELSE&lt;/span&gt; dbms_output&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;put_line&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;‘&lt;span class=&quot;token constant&quot;&gt;NOT&lt;/span&gt; a grade&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;’&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;CASE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Like the IF statement ELSE block is optional here. When specified ELSE block will be executed if no WHEN expression matched. If not specified Oracle add following line at the end of case statement.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;RAISE&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;CASE_NOT_FOUND&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That means there is always a ELSE block in every case statement. The exception that raised by ELSE block can be handled by normal exception handling process of Oracle PL/SQL.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Searched Case Statement&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Searched case statement is little different from simple case statement. In searched case statement there is no selector. The statement block will be executed based on the evaluation value of WHEN clause. The result of the WHEN clause will be either true of false. If it is true, the statement block will be executed. Following is the implementation of the above example in searched case statement.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;CASE&lt;/span&gt;
    &lt;span class=&quot;token constant&quot;&gt;WHEN&lt;/span&gt; grade &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;A&apos;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;THEN&lt;/span&gt; dbms_output&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;put_line&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;‘&lt;span class=&quot;token constant&quot;&gt;Excellent!&lt;/span&gt;’&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token constant&quot;&gt;WHEN&lt;/span&gt; grade &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;B&apos;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;THEN&lt;/span&gt; dbms_output&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;put_line&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;‘&lt;span class=&quot;token constant&quot;&gt;Very&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Good!&lt;/span&gt;’&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token constant&quot;&gt;WHEN&lt;/span&gt; grade &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;C&apos;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;THEN&lt;/span&gt; dbms_output&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;put_line&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Well done!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token constant&quot;&gt;WHEN&lt;/span&gt; grade &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;D&apos;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;THEN&lt;/span&gt; dbms_output&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;put_line&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;You have passed!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token constant&quot;&gt;WHEN&lt;/span&gt; grade &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;F&apos;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;THEN&lt;/span&gt; dbms_output&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;put_line&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;You have failed!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token constant&quot;&gt;ELSE&lt;/span&gt; dbms_output&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;put_line&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;NOT a grade!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;CASE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Like the simple case statement ELSE block is optional in searched case statement. If it is omitted then Oracle PL/SQL will add following line at the end.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;RAISE&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;CASE_NOT_FOUND&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Case Expression&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is another types of case statement. Case expression returns a value. All WHEN expression must be associated with one statement. Case expression does not end with END CASE or semicolon. The key word END indicates the end of case expression.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;DECLARE&lt;/span&gt;
    bonus_amount &lt;span class=&quot;token constant&quot;&gt;NUMBER&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;BEGIN&lt;/span&gt;
    bonus_amount &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token constant&quot;&gt;CASE&lt;/span&gt;
        &lt;span class=&quot;token constant&quot;&gt;WHEN&lt;/span&gt; salary &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10000&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;AND&lt;/span&gt; salary &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20000&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1500&lt;/span&gt;
        &lt;span class=&quot;token constant&quot;&gt;WHEN&lt;/span&gt; salary &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20000&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;AND&lt;/span&gt; salary &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;40000&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;
        &lt;span class=&quot;token constant&quot;&gt;WHEN&lt;/span&gt; salary &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;40000&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;
    &lt;span class=&quot;token constant&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;END&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unlike the case statements discussed above case expression does not raise any exception if no WHEN clause matched. If no WHEN clause match the case expression returns NULL.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.nahidsaikat.com/tag/oracle-db/&quot; title=&quot;Oracle DB - Nahid Saikat&quot;&gt;Visit here&lt;/a&gt; for other oracle database related post.
Learn Oracle Database basics from &lt;a href=&quot;http://www.oracle.com/webfolder/technetwork/tutorials/obe/db/12c/r1/odb_quickstart/odb_quick_start.html&quot; title=&quot;Oracle Database Quick Start&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Oracle PL/SQL Conditions]]></title><description><![CDATA[Controlling the flow of execution is common in programming. It is very much needed to direct the flow of program based on some conditions. This can be done in any programming language by IF statements.]]></description><link>https://www.nahidsaikat.com//blog/2018/02/11/oracle-pl-sql-conditions/</link><guid isPermaLink="false">https://www.nahidsaikat.com//blog/2018/02/11/oracle-pl-sql-conditions/</guid><pubDate>Sun, 11 Feb 2018 22:12:03 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;/media/pixabay/conditions.jpg&quot; alt=&quot;Oracle PL/SQL Conditions&quot; title=&quot;Oracle PL/SQL Conditions&quot;&gt;
&lt;a href=&quot;https://pixabay.com/photos/autumn-leaves-branch-bright-3846345/&quot;&gt;&lt;center&gt;&lt;span style=&quot;color:black&quot;&gt;Image Source&lt;/span&gt;&lt;/center&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Controlling the flow of execution is common in programming. It is very much needed to direct the flow of program based on some conditions. This can be done in any programming language by IF statements. Oracle PL/SQL also has if statement. Oracle supports three kinds of IF statements. Simple IF THEN END IF statement, IF THEN ELSE END IF statement and IF THEN ELSIF ELSE END IF statement.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IF THEN END IF:&lt;/strong&gt; This is the most simple IF statement. The IF keyword is followed by a condition, if the condition is true then the statements between THEN and END IF will get executed. Otherwise the statements will be skipped and execution will continue from the statements immediately after END IF.&lt;/p&gt;
&lt;p&gt;General form of IF THEN END IF is following&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;IF&lt;/span&gt; conditions &lt;span class=&quot;token constant&quot;&gt;THEN&lt;/span&gt;
  &lt;span class=&quot;token constant&quot;&gt;Statements&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The following code will show ‘Excellent’ if the grade is ‘A’.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;DECLARE&lt;/span&gt;
  grade &lt;span class=&quot;token constant&quot;&gt;VARCHAR2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;A&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;BEGIN&lt;/span&gt;
  &lt;span class=&quot;token constant&quot;&gt;IF&lt;/span&gt; grade &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;A&apos;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;THEN&lt;/span&gt;
    dbms_output&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;put_line&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Excellent&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;END&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/media/pl_sql/if-end-if.png&quot; alt=&quot;IF THEN END IF Statement&quot; title=&quot;IF THEN END IF Statement&quot;&gt;
&lt;strong&gt;&lt;center&gt;Figure 1: IF THEN END IF Statement&lt;/center&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IF THEN ELSE END IF:&lt;/strong&gt; This kind of IF statement provides bi-directional flow of execution. There are two blocks of statement here. One is between THEN and ELSE keywords and other is between ELSE and END IF keywords. When the condition between the IF and THEN keywords is true statements between THEN and ELSE will get executed. If the condition is false then the statements between ELSE and END IF will get executed.&lt;/p&gt;
&lt;p&gt;The general form of this kind of IF statement is&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;IF&lt;/span&gt; condition &lt;span class=&quot;token constant&quot;&gt;THEN&lt;/span&gt;
  &lt;span class=&quot;token constant&quot;&gt;Statements&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token constant&quot;&gt;ELSE&lt;/span&gt;
  &lt;span class=&quot;token constant&quot;&gt;Statements&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The following program will show if a student is passed or not.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;DECLARE&lt;/span&gt;
  stu_mark &lt;span class=&quot;token constant&quot;&gt;NUMBER&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;BEGIN&lt;/span&gt;
  &lt;span class=&quot;token constant&quot;&gt;IF&lt;/span&gt; stu_mark &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;40&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;THEN&lt;/span&gt;
    dbms_output&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;put_line&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Student is not passed&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token constant&quot;&gt;ELSE&lt;/span&gt;
    dbms_output&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;put_line&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Student is passed&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;END&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/media/pl_sql/if-then-else-end-if.png&quot; alt=&quot;IF THEN ELSE END IF Statement&quot; title=&quot;IF THEN ELSE END IF Statement&quot;&gt;
&lt;strong&gt;&lt;center&gt;Figure 2: IF THEN ELSE END IF Statement&lt;/center&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IF THEN ELSIF ELSE END IF:&lt;/strong&gt; This is the last kind of IF statement. It is little bit complex IF statement. It contains multiple conditions and multiple block of statements. Based on the value of the conditions one block statement will get executed. The program will check conditions from top to bottom. When ever any condition matched it stops checking the conditions and execute the statements in that block and exits the IF statements. If no condition returns a true value then the ELSE statements will be executed.&lt;/p&gt;
&lt;p&gt;The general form of this IF statement is&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;IF&lt;/span&gt; condition &lt;span class=&quot;token constant&quot;&gt;THEN&lt;/span&gt;
  &lt;span class=&quot;token constant&quot;&gt;Statements&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token constant&quot;&gt;ELSIF&lt;/span&gt; condition &lt;span class=&quot;token constant&quot;&gt;THEN&lt;/span&gt;
  &lt;span class=&quot;token constant&quot;&gt;Statements&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token constant&quot;&gt;ELSE&lt;/span&gt;
  &lt;span class=&quot;token constant&quot;&gt;Statements&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The ELSE statement is optional. If not present and no condition returns true value then no statements will get executed.&lt;/p&gt;
&lt;p&gt;The following programs shows message based on the grade of a student.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;DECLARE&lt;/span&gt;
  grade &lt;span class=&quot;token constant&quot;&gt;VARCHAR2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;A&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;BEGIN&lt;/span&gt;
  &lt;span class=&quot;token constant&quot;&gt;IF&lt;/span&gt; grade &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;A&apos;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;THEN&lt;/span&gt;
    dbms_output&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;put_line&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Excellent!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token constant&quot;&gt;ELSIF&lt;/span&gt; grade &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;B&apos;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;THEN&lt;/span&gt;
    dbms_output&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;put_line&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Very Good!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token constant&quot;&gt;ELSIF&lt;/span&gt; grade &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;C&apos;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;THEN&lt;/span&gt;
    dbms_output&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;put_line&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Well done!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token constant&quot;&gt;ELSIF&lt;/span&gt; grade &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;D&apos;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;THEN&lt;/span&gt;
    dbms_output&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;put_line&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;You have passed!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token constant&quot;&gt;ELSIF&lt;/span&gt; grade &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;F&apos;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;THEN&lt;/span&gt;
    dbms_output&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;put_line&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;You have failed!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token constant&quot;&gt;ELSE&lt;/span&gt;
    dbms_output&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;put_line&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;NOT a grade!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;END&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/media/pl_sql/if-then-elseif-else-end-if.png&quot; alt=&quot;IF THEN ELSIF ELSE END IF Statement&quot; title=&quot;IF THEN ELSIF ELSE END IF Statement&quot;&gt;
&lt;strong&gt;&lt;center&gt;Figure 3: IF THEN ELSIF ELSE END IF Statement&lt;/center&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.nahidsaikat.com/tag/oracle-db/&quot; title=&quot;Oracle DB - Nahid Saikat&quot;&gt;Visit here&lt;/a&gt; for other oracle database related post.
Learn Oracle Database basics from &lt;a href=&quot;http://www.oracle.com/webfolder/technetwork/tutorials/obe/db/12c/r1/odb_quickstart/odb_quick_start.html&quot; title=&quot;Oracle Database Quick Start&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Oracle PL/SQL Blocks]]></title><description><![CDATA[PL/SQL is a block structured language. Everything written in PL/SQL are divided in logical blocks. Each blocks has three parts declaration sections, executable sections and exception handling sections.]]></description><link>https://www.nahidsaikat.com//blog/2018/01/29/oracle-pl-sql-blocks/</link><guid isPermaLink="false">https://www.nahidsaikat.com//blog/2018/01/29/oracle-pl-sql-blocks/</guid><pubDate>Mon, 29 Jan 2018 22:12:03 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;/media/pixabay/pl-sql-block.png&quot; alt=&quot;PL/SQL Block&quot; title=&quot;PL/SQL Block&quot;&gt;
&lt;a href=&quot;https://pixabay.com/illustrations/cubes-assorted-random-toys-677092/&quot;&gt;&lt;center&gt;&lt;span style=&quot;color:black&quot;&gt;Image Source&lt;/span&gt;&lt;/center&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PL/SQL is a block structured language. Everything written in PL/SQL are divided in logical blocks. Each blocks has three parts declaration sections, executable sections and exception handling sections.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Declaration Section:&lt;/strong&gt; This is an optional section. This section contains declaration of variables, constants, cursors, subprograms and other elements necessary in program. &lt;strong&gt;DECLARE&lt;/strong&gt; is the keyword that indicates the starts of declaration section.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Executable Section:&lt;/strong&gt; Executable section is the main part of the program. This section start with the keyword &lt;strong&gt;BEGIN&lt;/strong&gt; and end with keyword &lt;strong&gt;END&lt;/strong&gt;. All the executable statements are placed inside this section. This section should not be empty, it should contains at least null command to indicate nothing should be execute.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Exception Handling Section:&lt;/strong&gt; Exception handling section starts with the keyword &lt;strong&gt;EXCEPTION&lt;/strong&gt;. It handles all the exception raises while executing the statements in executable section. It is also an optional section.&lt;/p&gt;
&lt;p&gt;A typical PL/SQL block looks like following.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;DECLARE&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;declaration section&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;BEGIN&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;executable section&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token constant&quot;&gt;EXCEPTION&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;exception handling section&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;END&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is the hello world program written in PL/SQL block.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;BEGIN&lt;/span&gt;
    &lt;span class=&quot;token constant&quot;&gt;DBMS_OUTPUT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;PUT_LINE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Hello World!&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token constant&quot;&gt;EXCEPTION&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Following is the same hello world program. This time a variable is declared which size is 100 bytes. This variable contains string “Hello World!” and is being used to show output. It also handles exception.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;DECLARE&lt;/span&gt;
    message &lt;span class=&quot;token constant&quot;&gt;VARCHAR2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Hello World!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;BEGIN&lt;/span&gt;
    &lt;span class=&quot;token constant&quot;&gt;DBMS_OUTPUT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;PUT_LINE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token constant&quot;&gt;EXCEPTION&lt;/span&gt;
    &lt;span class=&quot;token constant&quot;&gt;WHEN&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;OTHERS&lt;/span&gt;
    &lt;span class=&quot;token constant&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;DBMS_OUTPUT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;PUT_LINE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Exception Occurred!&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;END&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Blocks can be nested. Following is the same program but this time we are using nested blocks.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;DECLARE&lt;/span&gt;
    message_one &lt;span class=&quot;token constant&quot;&gt;VARCHAR2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Hello&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;BEGIN&lt;/span&gt;
    &lt;span class=&quot;token constant&quot;&gt;DECLARE&lt;/span&gt;
        message_two &lt;span class=&quot;token constant&quot;&gt;VARCHAR2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; message_one &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos; World!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;BEGIN&lt;/span&gt;
        &lt;span class=&quot;token constant&quot;&gt;DBMS_OUTPUT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;PUT_LINE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message_two&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;END&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token constant&quot;&gt;EXCEPTION&lt;/span&gt;
    &lt;span class=&quot;token constant&quot;&gt;WHEN&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;OTHERS&lt;/span&gt;
    &lt;span class=&quot;token constant&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;DBMS_OUTPUT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;PUT_LINE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Exception Occurred!&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;END&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are many tools available to run PL/SQL programs. SQL&lt;em&gt;PLUS is one of the tool to run PL/SQL program provided by Oracle. To execute the above programs in SQL&lt;/em&gt;PLUS first connect with database using the command &lt;strong&gt;CONNECT database_name&lt;/strong&gt;. After providing password you will be connected with database_name. You should run &lt;strong&gt;SET SERVEROUTPUT ON&lt;/strong&gt; command to see output on screen. Then type the program in SQL&lt;em&gt;PLUS command prompt at the end type slash(/) to tell SQL&lt;/em&gt;PLUS to execute. When executed you will see Hello World! written on the screen.&lt;/p&gt;
&lt;p&gt;Following figure shows executing the hello world example in SQL*PLUS.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/pl_sql/hello-world.png&quot; alt=&quot;Encapsulation&quot; title=&quot;Hello World in PL/SQL&quot;&gt;
&lt;strong&gt;&lt;center&gt;Figure: Executing PL/SQL Program in SQL*PLUS.&lt;/center&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.nahidsaikat.com/tag/oracle-db/&quot; title=&quot;Oracle DB - Nahid Saikat&quot;&gt;Visit here&lt;/a&gt; for other oracle database related post.
Learn Oracle Database basics from &lt;a href=&quot;http://www.oracle.com/webfolder/technetwork/tutorials/obe/db/12c/r1/odb_quickstart/odb_quick_start.html&quot; title=&quot;Oracle Database Quick Start&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Bank Reconciliation]]></title><description><![CDATA[A company's cash account records all the transactions related to cash. Similarly Bank also records all the transactions of its account. The balance of these two account should be equal. But in most cases they don't match properly.]]></description><link>https://www.nahidsaikat.com//blog/2018/01/21/bank-reconciliation/</link><guid isPermaLink="false">https://www.nahidsaikat.com//blog/2018/01/21/bank-reconciliation/</guid><pubDate>Sun, 21 Jan 2018 22:12:03 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;/media/pixabay/bank-reconciliation.jpg&quot; alt=&quot;Bank Reconciliation&quot; title=&quot;Bank Reconciliation&quot;&gt;
&lt;a href=&quot;https://pixabay.com/photos/calculator-calculation-insurance-385506/&quot;&gt;&lt;center&gt;&lt;span style=&quot;color:black&quot;&gt;Image Source&lt;/span&gt;&lt;/center&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;what-is-bank-reconciliation&quot;&gt;&lt;a href=&quot;#what-is-bank-reconciliation&quot; aria-label=&quot;what is bank reconciliation permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What is Bank Reconciliation?&lt;/h3&gt;
&lt;p&gt;A company’s cash account records all the transactions related to cash. Similarly Bank also records all the transactions of its account. The balance of these two account should be equal. But in most cases they don’t match properly. There are some transactions that appear in one but not in other which cause the main reason of mismatched amount. Typically bank sends a statement containing all transactions of its accounts to the company in every month. This statement contains the beginning balance of account, transaction during this month and the ending balance of the account. After getting the statement from bank company should match the transaction with the book account to be consistent. The process of matching bank statement with the company’s book account is called bank reconciliation.&lt;/p&gt;
&lt;h3 id=&quot;bank-reconciliation-process&quot;&gt;&lt;a href=&quot;#bank-reconciliation-process&quot; aria-label=&quot;bank reconciliation process permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Bank Reconciliation Process&lt;/h3&gt;
&lt;p&gt;Deposit in transit, outstanding checks, service charge, NSF checks, interest earned, notes receivable are the items that causes mismatch in both accounts. These items doesn’t appear in both. Bank reconciliation process ensures that they are present in both account. Bank reconciliation process can be divided on two steps. Adjusting the balance as per bank account and adjusting the balance as per book account.&lt;/p&gt;
&lt;h3 id=&quot;adjusting-the-balance-per-bank&quot;&gt;&lt;a href=&quot;#adjusting-the-balance-per-bank&quot; aria-label=&quot;adjusting the balance per bank permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Adjusting the Balance per Bank&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Deposit in transit:&lt;/strong&gt; Sometimes company receives payment from customers and records it. But this payment amount is deposited in bank so lately that they don’t appear on current statement but will appear on next bank statement. Suppose company receives payment on 31st January so book account will record it in January transaction. Because of lately deposit bank will record in on 1st February and next bank statement will contain it. As deposit in transits are already in book account it should be added to bank account to show correct balance.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Outstanding checks:&lt;/strong&gt; Outstanding checks are the checks that has been issued by the company but has not been cleared yet. Typically checks issued at the end of month may be cleared at the beginning of next month. But company records it after issuing but bank will record when it is cleared. As outstanding checks are present in book account bank account needs to adjusted for correct balance.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Errors:&lt;/strong&gt; Special care should be taken while recording any transaction. But it can not eliminate errors permanently.  It may happen that a transaction amount is 145 but it is recorded as 154 or vise versa which causes error. Based on the type of error bank account will be added or subtracted of the correct amount for accurate balance.&lt;/p&gt;
&lt;h3 id=&quot;adjusting-the-balance-per-book&quot;&gt;&lt;a href=&quot;#adjusting-the-balance-per-book&quot; aria-label=&quot;adjusting the balance per book permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Adjusting the Balance per Book&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Service Charge:&lt;/strong&gt; Sometimes bank reduces the balance for service charges. Bank maintains the account, take deposits, clear checks, prepare bank statement and for this kind of activity bank takes charge with out notifying the company. Company know about it after getting bank statement. As bank service charges are absent in book account it should be deducted for correct balance.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NSF Checks:&lt;/strong&gt; NSF stands for ‘Not Sufficient Funds’. When checks are being taken to bank for clearance but bank account has low balance these checks are termed as NSF checks. In case of NSF checks bank takes a charge which is present in bank statement but not in book account. So book account needs to be adjusted.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Check Printing Charge:&lt;/strong&gt; Sometimes bank takes charge for the check that they print for company. After getting the bank statement company know about it and they should reduce book balance for being consistent with bank account.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Interest Earned:&lt;/strong&gt; Company earns interest for the bank account they have. Bank statement contains records of this amount. But company account doesn’t contains it. So after getting the bank statement company book account should be added by interest amount.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Notes Receivable:&lt;/strong&gt;  When company authorizes bank can collect notes receivable and its interest for the company. Bank also charges some amount for this collection service. If bank collects notes receivable company can know about it after having bank statement. So book account needs to be added with notes receivable amount plus interest and also reduced with bank charges.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Errors:&lt;/strong&gt; In the process of recording every transaction errors may happen. When errors are identified book account should be added or subtracted for accurate balance.&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;&lt;a href=&quot;#conclusion&quot; aria-label=&quot;conclusion permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;After adjusting both the bank and book accounts, end balance should be compared. If still it does not match then same procedure should be taken until it matches. When book balance matches with bank balance necessary adjusting entry should given to book account. Bank reconciliation process ensures the correctness of the transactions of cash account. So it is very important for every company to reconcile their accounts.&lt;/p&gt;
&lt;p&gt;Check out other accounting related post from
&lt;a href=&quot;https://www.nahidsaikat.com/category/accounting/&quot; title=&quot;Accounting Post&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Inheritance (OOP)]]></title><description><![CDATA[Inheritance is the process of acquiring the properties and functionalities of another class. An object is a container that contains properties and methods to operate of these properties.]]></description><link>https://www.nahidsaikat.com//blog/2017/11/12/inheritance/</link><guid isPermaLink="false">https://www.nahidsaikat.com//blog/2017/11/12/inheritance/</guid><pubDate>Sat, 30 Dec 2017 22:12:03 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;/media/pixabay/inheritance.jpg&quot; alt=&quot;Inheritance&quot; title=&quot;Inheritance&quot;&gt;
&lt;a href=&quot;https://pixabay.com/illustrations/microbiology-dna-people-structure-163521/&quot;&gt;&lt;center&gt;&lt;span style=&quot;color:black&quot;&gt;Image Source&lt;/span&gt;&lt;/center&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Inheritance is the process of acquiring the properties and functionalities of another class. An object is a container that contains properties and methods to operate of these properties. Class is the blueprint or template that can be used to create that object. Inheritance is the relationship between the blueprints. We can express inheritance like the statement: we want to create an object, but there is an object that is similar to this one so instead of creating the new object from scratch we want to use the properties and functionalities of that existing object.
The class that is receiving or inheriting the properties and functionalities of other class is termed as sub class or child class or derived class.
The class that is being inheriting is called as super or parent or base class.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Suppose there are two departments in a University. Physics department and chemistry department. The teachers of both the departments have the properties designation and all takes classes. But physics department teachers have main subject property which is “Physics” and the chemistry department teachers have the same property which is “Chemistry”. So we can create a class Teacher that will contain common properties and functionalities (in that case designation and taking class) and create other two class PhysicsTeacher and ChemistryTeacher that will inherit the Teacher class and specify the things the is not common. The following code will illustrate this.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Teacher&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; designation &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; “&lt;span class=&quot;token class-name&quot;&gt;Teacher&lt;/span&gt;”
    &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Take_Class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;“&lt;span class=&quot;token class-name&quot;&gt;Taking&lt;/span&gt; classes…”&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PhysicsTeacher&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Teacher&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; main_subject &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; “&lt;span class=&quot;token class-name&quot;&gt;Physics&lt;/span&gt;”&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ChemistryTeacher&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Teacher&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; main_subject &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; “&lt;span class=&quot;token class-name&quot;&gt;Chemistry&lt;/span&gt;”&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Types of Inheritance:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are several types of inheritance that are being used.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Single Inheritance: Single inheritance is a inheritance where child class inherits only parent class. For example, class B inherits class A.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;A&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;pass&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multilevel Inheritance: This is a inheritance where child class is being inherited by other class. Example, class C inherits class B and class B inherits class A.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;A&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;B&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;pass&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multiple inheritance: In this type of inheritance a class can inherit many other classes. Example, class D is inheriting class A, B and C.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;A&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;B&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;A&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; B&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; C&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;pass&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hierarchical inheritance: When a class is being inherited by many other classes it is called hierarchical inheritance. For example, class A is being inherited by classes B and C.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;A&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;A&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;pass&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hybrid inheritance: When more than one types of inheritance is combined in a single program it is called hybrid inheritance. Suppose class C inherits class B and class B inherits class A, and in other place class D inherits class A. As multilevel and single inheritance both are present in one program it is hybrid inheritance.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;A&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;B&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;A&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;pass&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Constructors with Inheritance:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Constructors are called when an object is being created. By default the constructor of super class is called. But using super keyword base class constructor can explicitly being called. In inheritance constructors are called in top-down approach. The super keyword uses the class immediately above the child class not the parent class of the parent.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Method Overriding:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Method overriding is one of the important concepts in inheritance. It is possible that there is a need to implement the parent method in different way in child class. The redefinition of methods that already exists in parent class is called method overriding. Which version of method will be called is depends of the language. Different language implements this in different ways. But mostly child version of overridden method is called.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Un-inheritable Class:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Different languages have different ways to indicate which class can be inherited by child class. Java and C++ uses ‘final’ keywords to indicate that a class cannot be inherited. Where-as C# language use ‘sealed’ keyword for the same purpose. But when a class is declared as final or sealed then no class can inherit it. The final or sealed keywords needs to add at the beginning of the class declaration. That means before the class keyword.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Un-overridden Method:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Just as the sealed or finalized can not be inherited further there is also method modifier that sealed the method so that it can not be override in sub class. A private method can never be override as because it can not be accessed from child class. The only place from where private class can be accessed is the place where it is being defined. A final method in Java and C++ and a sealed method in C# can never be overridden.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Code reuse:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One of the advantages of inheritance is that it provides mechanism to reuse the code. Parent classes contains all the common properties and functionalities. Child classes only defines the properties and functionalities that are specific to them. So common properties and functionalities are not duplicated in child classes and code are being reused. That can make the code base shortened and maintainable for future.&lt;/p&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://en.wikipedia.org/wiki/Inheritance_(object-oriented_programming)&quot;&gt;Wikipedia&lt;/a&gt; “Inheritance (object-oriented programming)”) for more. &lt;a href=&quot;https://www.nahidsaikat.com/tag/oop/&quot; title=&quot;Nahid Saikat&quot;&gt;Click here&lt;/a&gt; for other OOP posts.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Encapsulation (OOP)]]></title><description><![CDATA[Encapsulation is the process that binds data and functions which operates on the data under a single entity. It is one of the most important four features of Object Oriented Programming.]]></description><link>https://www.nahidsaikat.com//blog/2017/12/30/encapsulation/</link><guid isPermaLink="false">https://www.nahidsaikat.com//blog/2017/12/30/encapsulation/</guid><pubDate>Sat, 30 Dec 2017 22:12:03 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;/media/pixabay/encapsulation.jpg&quot; alt=&quot;Encapsulation&quot; title=&quot;Encapsulation&quot;&gt;
&lt;a href=&quot;https://pixabay.com/photos/tablets-drug-encapsulate-medical-4028232/&quot;&gt;&lt;center&gt;&lt;span style=&quot;color:black&quot;&gt;Image Source&lt;/span&gt;&lt;/center&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What is Encapsulation?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Encapsulation is the process that binds data and functions which operates on the data under a single entity. It is one of the most important four features of Object Oriented Programming. Other features are Abstraction, Inheritance and Polymorphism. One of the greatest implementation of encapsulation is class. Because class binds the data and functions that operates on that data together in single unit.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Real world example&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In restaurants there are many sections. Waiter section, chef section, billing section. When customer goes to the restaurant the waiter collects the order and pass the order to the chef section. The chef section starts their process when order is passed to them. When food is ready they inform and pass the food to waiter and waiter serves the food. Finally billing section bills for the food. These different section do there work independently without knowing other sections. As waiter doesn’t know what are the ingredient of the food as well as the recipe. He just needs to pass the order to chef section and get food. All other things of chef section are hidden for him. That is encapsulation, the ingredient and the recipe are bind in one unit chef section. Waiter section just needs a way to pass the order and get the food when done.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To implement the encapsulation in any language like Java, C# or C++ first create private data member and then create public methods  to set and get the data. The method to set data is called setter and the method to get data is called getter.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; serial&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; stuName&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; stuAge&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//Getter methods&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getSerial&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; serial&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getStuName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; stuName&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getStuAge&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; stuAge&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//Setter methods&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setStuAge&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; newValue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        stuAge &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; newValue&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setStuName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; newValue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        stuName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; newValue&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setSerial&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; newValue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        serial &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; newValue&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Department&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;token class-name&quot;&gt;Student&lt;/span&gt; obj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
         obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setStuName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Mario&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
         obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setStuAge&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
         obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setSerial&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;112233&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
         System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Student Name: &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getStuName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
         System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Student Serial: &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getSerial&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
         System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Student Age: &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getStuAge&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Data can be made read only or write only at any time. If no setter is given it becomes read only. Similarly if getter is not present then data becomes write only. In setter and getter methods any logic can be applied. So a validation process can be integrated before setting the data.
A class is full control of data that is stored in its fields.
Encapsulation improves readability and maintainability of the code as well as it reduces human errors.&lt;/p&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)&quot; title=&quot;Encapsulation (Computer Programming)&quot;&gt;Wikipedia&lt;/a&gt; for more. &lt;a href=&quot;https://www.nahidsaikat.com/tag/oop/&quot; title=&quot;Nahid Saikat&quot;&gt;Click here&lt;/a&gt; for other OOP posts.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Polymorphism (OOP)]]></title><description><![CDATA[Polymorphism is one of the most important concepts of object oriented programming. It comes from two Greek words, Poly and Morph. Poly means Many and Morph means Form.]]></description><link>https://www.nahidsaikat.com//blog/2017/12/22/polymorphism/</link><guid isPermaLink="false">https://www.nahidsaikat.com//blog/2017/12/22/polymorphism/</guid><pubDate>Fri, 22 Dec 2017 22:12:03 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;/media/pixabay/polimorphism.jpg&quot; alt=&quot;Polymorphism&quot; title=&quot;Polymorphism&quot;&gt;
&lt;a href=&quot;https://pixabay.com/photos/morpho-peleides-butterfly-54776/&quot;&gt;&lt;center&gt;&lt;span style=&quot;color:black&quot;&gt;Image Source&lt;/span&gt;&lt;/center&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Polymorphism is one of the most important concepts of object oriented programming. It comes from two Greek words, Poly and Morph. Poly means Many and Morph means Form. So polymorphism is the ability of functions or objects to take multiple forms based on the data or object. Suppose we have a Shape class which has a draw method that draws something. As Shape is a generic class so it does not draw a specific thing.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Shape&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Draw&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Performing generic drawing&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now lets say we have two more class Rectangle and Circle that inherits the Shape class.  Rectangle and Circle class will also have Draw method and will draw rectangle and circle respectively.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Rectangle&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Shape&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Draw&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Drawing a rectangle&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Circle&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Shape&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Draw&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Drawing a circle&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can use these classes in main program and call their Draw method and the specific class object will call their own version of  Draw method.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Program&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; shapes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Shape&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Rectangle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Circle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; shape &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; shapes&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            shape&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Draw&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Press any key to exit.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ReadKey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is the perfect example of polymorphism. We have a common Shape class and every shape inherits it and specify their own Draw method. When we call the draw method, the specific shape will call their own version of Draw method. Thus we can say that the method is called based upon the object on which it has been called.&lt;/p&gt;
&lt;p&gt;There are two types of polymorphism. Dynamic polymorphism and static polymorphism. The example above is an example of dynamic polymorphism. Because which Draw method will be called is decided at run time. Here we can come up with the statement that dynamic polymorphism is where method determination happens at run time. On the other hand, in static polymorphism determination of method happens at compile time. Below is an example of static polymorphism.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SimpleCalculator&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Program&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;SimpleCalculator&lt;/span&gt; obj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SimpleCalculator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)&quot; title=&quot;Encapsulation (Computer Programming)&quot;&gt;Wikipedia&lt;/a&gt; for more. &lt;a href=&quot;https://www.nahidsaikat.com/tag/oop/&quot; title=&quot;Nahid Saikat&quot;&gt;Click here&lt;/a&gt; for other OOP posts.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Accounts Receivable]]></title><description><![CDATA[Receivable is a due from any individual or company to other individual or company. Accounts receivable is a due that generated by selling products or services to individual or company.]]></description><link>https://www.nahidsaikat.com//blog/2017/11/22/accounts-receivable/</link><guid isPermaLink="false">https://www.nahidsaikat.com//blog/2017/11/22/accounts-receivable/</guid><pubDate>Wed, 22 Nov 2017 22:12:03 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;/media/pixabay/accounts-receivable.jpg&quot; alt=&quot;Accounts Receivable&quot; title=&quot;Accounts Receivable&quot;&gt;
&lt;a href=&quot;https://pixabay.com/photos/account-america-american-bank-3960036/&quot;&gt;&lt;center&gt;&lt;span style=&quot;color:black&quot;&gt;Image Source&lt;/span&gt;&lt;/center&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Receivable is a due from any individual or company to other individual or company. Accounts receivable is a due that generated by selling products or services to individual or company. Accounts receivable can be generated only from credit sale. Normally company allows credits from 30 to 60 days. Some company offers discount to encourage clients pay early.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;
Suppose Karim Groups Limited sell some merchandising products to X &amp;#x26; Z Limited for $10000, terms 2/10, n/30 (if paid within 10 days gets 2% discount, but must pay full amount within 30 days) on 1st April, 2017. X &amp;#x26; Z Limited returns some products to Karim Groups which is worth of $1000 on 3rd April. On 10th April X &amp;#x26; Z Limited pays it’s due to Karim Groups Limited. The transactions will be as follows&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
&lt;table class=&quot;table table-bordered table-hover&quot;&gt;
  &lt;thead class=&quot;thead-dark&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;Date&lt;/th&gt;
    &lt;th&gt;Accounts&lt;/th&gt;
    &lt;th&gt;Debit&lt;/th&gt;
    &lt;th&gt;Credit&lt;/th&gt;
  &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tr&gt;
   &lt;td&gt;01 April, 2017&lt;/td&gt;
   &lt;td&gt;Accounts Receivable – X &amp; Z Limited&lt;/td&gt;
   &lt;td&gt;$10,000&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;01 April, 2017&lt;/td&gt;
   &lt;td&gt;Sales Revenue&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;$10,000&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/br&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
&lt;table class=&quot;table table-bordered table-hover&quot;&gt;
  &lt;thead class=&quot;thead-dark&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;Date&lt;/th&gt;
    &lt;th&gt;Accounts&lt;/th&gt;
    &lt;th&gt;Debit&lt;/th&gt;
    &lt;th&gt;Credit&lt;/th&gt;
  &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tr&gt;
   &lt;td&gt;03 April, 2017&lt;/td&gt;
   &lt;td&gt;Sales Return &amp; Allowance&lt;/td&gt;
   &lt;td&gt;$1,000&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;03 April, 2017&lt;/td&gt;
   &lt;td&gt;Accounts Receivable – X &amp; Z Limited&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;$1,000&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/br&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
&lt;table class=&quot;table table-bordered table-hover&quot;&gt;
  &lt;thead class=&quot;thead-dark&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;Date&lt;/th&gt;
    &lt;th&gt;Accounts&lt;/th&gt;
    &lt;th&gt;Debit&lt;/th&gt;
    &lt;th&gt;Credit&lt;/th&gt;
  &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tr&gt;
    &lt;td&gt;10 April, 2017&lt;/td&gt;
    &lt;td&gt;Cash&lt;/td&gt;
    &lt;td&gt;$8,820&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;10 April, 2017&lt;/td&gt;
   &lt;td&gt;Discount&lt;/td&gt;
   &lt;td&gt;$120&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;10 April, 2017&lt;/td&gt;
   &lt;td&gt;Accounts Receivable – X &amp; Z Limited&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;$9,000&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/br&gt;
&lt;p&gt;Accounts Receivable account is one of the important accounts for any business. Accounts Receivable is posted to balance sheet as a current asset. But determining the amount is very tough, because there is always have some receivable that will not be collected. Normally this is considered as Bad Debt Expense. There are two method to determine the bad debt expense.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Direct write-off method,&lt;/li&gt;
&lt;li&gt;Allowance method.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In &lt;strong&gt;direct write-off method&lt;/strong&gt; bad debt expenses are written to accounts when it actually happens. Suppose, Zaman Steels Limited have accounts receivable amount of $5,000 to AB Aluminium Limited. But AB Aluminium Limited is in great lose due to natural disaster at their factory. So it is known that AB Aluminium Limited is unable to pay $5,000. So it will become bad debt. It will be written in direct write-off method as follow.&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
&lt;table class=&quot;table table-bordered table-hover&quot;&gt;
  &lt;thead class=&quot;thead-dark&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;Date&lt;/th&gt;
    &lt;th&gt;Accounts&lt;/th&gt;
    &lt;th&gt;Debit&lt;/th&gt;
    &lt;th&gt;Credit&lt;/th&gt;
  &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tr&gt;
   &lt;td&gt;15 May, 2017&lt;/td&gt;
   &lt;td&gt;Bad Debt Expense&lt;/td&gt;
   &lt;td&gt;$5,000&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;15 May, 2017&lt;/td&gt;
   &lt;td&gt;Accounts Receivable – X &amp; Z Limited&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;$5,000&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/br&gt;
&lt;p&gt;Although direct write-off method is easy to maintain it has some serious problem. In this method bad debt may be written in different year other than the year when sales is generated. Suppose MM Electronics sales $20,00,000 on year 2015 on credits. In financial year of 2015 it will show $20,00,000 as sales revenue and $20,00,000 as accounts receivable. But this credit will be collected on 2016. If 50% of credit become bad debt then in 2016’s balance sheet it will show $10,00,000 as bad debt expense. But this bad debt is generated in 2015, so it should be in 2015’s balance sheet.&lt;/p&gt;
&lt;p&gt;As bad debt is normal case in business it could be estimated before it actually happens from previous experience. Generally company’s estimate it and allow some percentage of sale as bed debt in their accounting system. This method of estimating bad debt is called &lt;strong&gt;allowance method&lt;/strong&gt;. Suppose Advance IT Limited allows 10% of its sale as bad debt and its total sale is $10,00,000, the following journal entry will be held,&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
&lt;table class=&quot;table table-bordered table-hover&quot;&gt;
  &lt;thead class=&quot;thead-dark&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;Date&lt;/th&gt;
    &lt;th&gt;Accounts&lt;/th&gt;
    &lt;th&gt;Debit&lt;/th&gt;
    &lt;th&gt;Credit&lt;/th&gt;
  &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tr&gt;
   &lt;td&gt;5 July, 2017&lt;/td&gt;
   &lt;td&gt;Bad Debt Expense&lt;/td&gt;
   &lt;td&gt;$10,000&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;5 July, 2017&lt;/td&gt;
   &lt;td&gt;Allowance for Bad Debt&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;$10,000&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/br&gt;
&lt;p&gt;When actual bad debt occurs allowance for bad debt account and accounts receivable account will be adjusted.&lt;/p&gt;
&lt;p&gt;Allowance for bad debt account will behave as contra account in balance sheet to reduce accounts receivable account amount.&lt;/p&gt;
&lt;p&gt;Sometimes company get paid be customers that they considered as bad debt. In this case two journal entry is needed. Suppose Rahman Traders Limited gets paid be $10,000 that they considered as bad debt. Then they needs to do following journal entry in their accounting system,&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
&lt;table class=&quot;table table-bordered table-hover&quot;&gt;
  &lt;thead class=&quot;thead-dark&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;Date&lt;/th&gt;
    &lt;th&gt;Accounts&lt;/th&gt;
    &lt;th&gt;Debit&lt;/th&gt;
    &lt;th&gt;Credit&lt;/th&gt;
  &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tr&gt;
   &lt;td&gt;13 July, 2017&lt;/td&gt;
   &lt;td&gt;Accounts Receivable&lt;/td&gt;
   &lt;td&gt;$10,000&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;13 July, 2017&lt;/td&gt;
   &lt;td&gt;Allowance for Bad Debt&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;$10,000&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/br&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
&lt;table class=&quot;table table-bordered table-hover&quot;&gt;
  &lt;thead class=&quot;thead-dark&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;Date&lt;/th&gt;
    &lt;th&gt;Accounts&lt;/th&gt;
    &lt;th&gt;Debit&lt;/th&gt;
    &lt;th&gt;Credit&lt;/th&gt;
  &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tr&gt;
   &lt;td&gt;13 July, 2017&lt;/td&gt;
   &lt;td&gt;Cash&lt;/td&gt;
   &lt;td&gt;$10,000&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;13 July, 2017&lt;/td&gt;
   &lt;td&gt;Accounts Receivable&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;$10,000&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/br&gt;
&lt;p&gt;There are two methods to estimate the allowance for bad debt.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Percentage of Sales,&lt;/li&gt;
&lt;li&gt;Percentage of Receivable.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It is management’s decision to choose the method they wants to follow. Considering different criteria company choose a method that is more suited for their business.&lt;/p&gt;
&lt;p&gt;In percentage of sale method, company allow a % of credit sale as allowance for bad debt, where in percentage of receivable method company allow a % of receivable as allowance for bad debt.&lt;/p&gt;
&lt;p&gt;Accounts receivable can be sold out also. There are lots of company who collects money from customer of behalf of the company and they changes a percentage from it. Generally Bank takes responsibility for collecting money from customers. But there are others company too for this purpose.&lt;/p&gt;
&lt;p&gt;There are two main reason for which company wants to sale their receivable,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When they are out of cash,&lt;/li&gt;
&lt;li&gt;It is costly to collect money from customers.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Check out other accounting related post from
&lt;a href=&quot;https://www.nahidsaikat.com/category/accounting/&quot; title=&quot;Accounting Post&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Double Entry Accounting System]]></title><description><![CDATA[Double entry accounting system is the scientific method of recording business transactions. It has been first  documented by Luca Pacioli in 1494.]]></description><link>https://www.nahidsaikat.com//blog/2017/10/23/double-entry-accounting-system/</link><guid isPermaLink="false">https://www.nahidsaikat.com//blog/2017/10/23/double-entry-accounting-system/</guid><pubDate>Mon, 23 Oct 2017 22:12:03 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;/media/pixabay/double-entry-accounting-system.jpg&quot; alt=&quot;Double Entry Accounting System&quot; title=&quot;Double Entry Accounting System&quot;&gt;
&lt;a href=&quot;https://pixabay.com/photos/ledger-accounting-business-money-1428230/&quot;&gt;&lt;center&gt;&lt;span style=&quot;color:black&quot;&gt;Image Source&lt;/span&gt;&lt;/center&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;double-entry-accounting-system&quot;&gt;&lt;a href=&quot;#double-entry-accounting-system&quot; aria-label=&quot;double entry accounting system permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Double Entry Accounting System&lt;/h4&gt;
&lt;p&gt;Double entry accounting system is the scientific method of recording business transactions. It has been first  documented by Luca Pacioli in 1494 on his book entitled  “Summa de arithmetica, geometria, proportioni et proportionalita”. From then it has been widely accepted as the most scientific accounting system. Before this system single entry accounting system was being used which is not a scientific method and has lots of disadvantages compared to double entry accounting system.&lt;/p&gt;
&lt;p&gt;The main concept of double entry accounting system is that every business transactions have at least two party or accounts. One party will provide the benefits while the other will take the benefits. The party that provides the benefits is called as debit and the party that receives the benefits is called as credit. That means for every transaction there will be one debit entry and one credit entry.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;E.g.&lt;/strong&gt; Suppose Mr. X buys some materials for his business from Mr. Y for cash of $1,000. This is a business transaction. It has two sides or accounts. In one side Mr. X is receiving the materials and on the other side he is loosing money. In double entry accounting system both sides will be recorded. In this case inventory account will be increased by $1,000 for receiving the materials at the same time cash account will be decreased by $1,000 for loosing the money.&lt;/p&gt;
&lt;p&gt;It is mandatory that every transaction should have at least two entries. Though the number of entry is not limited to two. In double entry system one entry will have effect on the debit side of the account and the other entry will have effect on the credit side of the account. Thus the account entries keeps the account equation in balance,&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;center&gt;Assets = Liability + Owner’s Equity&lt;/center&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To illustrates this more clearly recall the above example. On a single entry account system the transaction will be written as follow,&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
&lt;table class=&quot;table table-bordered table-hover&quot;&gt;
  &lt;thead class=&quot;thead-dark&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;Date&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
    &lt;th&gt;Revenues&lt;/th&gt;
    &lt;th&gt;Expenses&lt;/th&gt;
  &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tr&gt;
   &lt;td&gt;10 August, 2017&lt;/td&gt;
   &lt;td&gt;Purchase of raw materials.&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td class=&quot;text-right&quot;&gt;$1,000&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/br&gt;
&lt;p&gt;But on a double entry accounting system the transaction will be recorded as follow,&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
&lt;table class=&quot;table table-bordered table-hover&quot;&gt;
  &lt;thead class=&quot;thead-dark&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;Date&lt;/th&gt;
    &lt;th&gt;Accounts&lt;/th&gt;
    &lt;th class=&quot;text-center&quot;&gt;Debit&lt;/th&gt;
    &lt;th class=&quot;text-center&quot;&gt;Credit&lt;/th&gt;
  &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tr&gt;
   &lt;td&gt;10 August, 2017&lt;/td&gt;
   &lt;td&gt;Inventory&lt;/td&gt;
   &lt;td class=&quot;text-right&quot;&gt;$1,000&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;10 August, 2017&lt;/td&gt;
   &lt;td&gt;Cash&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td class=&quot;text-right&quot;&gt;$1,000&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/br&gt;
&lt;p&gt;A notation should be taken to indicate that this transaction is for purchasing of raw materials for the business.
Traditionally the two effect of the transaction is termed as debit and credit. For every debit there will always be one and opposite credit with equal amount. That is the duality principle of accounting. Debit entry have the following effects,
Increase assets and expenses,
Decrease liability, income and owner’s equity.
And the credit entry will have the following effects,
Increase liability, income and owner’s equity,
Decrease assets and expenses.&lt;/p&gt;
&lt;h4 id=&quot;advantages&quot;&gt;&lt;a href=&quot;#advantages&quot; aria-label=&quot;advantages permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Advantages&lt;/h4&gt;
&lt;p&gt;Under double entry accounting system the two aspects of each transactions are recorded. It reduces the common error of accounting.
Auditing is easy on double entry account system, as every transaction have a debit side and an equal &amp;#x26; opposite credit side.
In double entry accounting system income and expenses are recorded separately thus income statement can easily be made.
Assets and liability can also be tracked easily which are balance sheet item. That means it is easy to know the financial position of the business at any time.
The reports that are generated using double entry account system contains less error and more trusted.
Accounting personals in all over the world accepted this accounting system, so double entry accounting system is well recognized accounting system.&lt;/p&gt;
&lt;h4 id=&quot;disadvantages&quot;&gt;&lt;a href=&quot;#disadvantages&quot; aria-label=&quot;disadvantages permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Disadvantages&lt;/h4&gt;
&lt;p&gt;To maintain accounting in the system accounting knowledgeable person is required.
It is a time consuming system and also requires more labor.
Large businesses has lots of data, so day by day this system will become very complex to maintain for them.&lt;/p&gt;
&lt;p&gt;Check out other accounting related post from
&lt;a href=&quot;https://www.nahidsaikat.com/category/accounting/&quot; title=&quot;Accounting Post&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Single Entry Accounting System]]></title><description><![CDATA[A single entry bookkeeping is an accounting system that records only one entry for a transaction to the accounting records.]]></description><link>https://www.nahidsaikat.com//blog/2017/10/21/single-entry-accounting-system/</link><guid isPermaLink="false">https://www.nahidsaikat.com//blog/2017/10/21/single-entry-accounting-system/</guid><pubDate>Sat, 21 Oct 2017 22:12:03 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;/media/pixabay/single-entry-accounting-system.jpg&quot; alt=&quot;Single Entry Accounting System&quot; title=&quot;Single Entry Accounting System&quot;&gt;
&lt;a href=&quot;https://pixabay.com/photos/paper-business-finance-currency-3150428/&quot;&gt;&lt;center&gt;&lt;span style=&quot;color:black&quot;&gt;Image Source&lt;/span&gt;&lt;/center&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;single-entry-bookkeeping&quot;&gt;&lt;a href=&quot;#single-entry-bookkeeping&quot; aria-label=&quot;single entry bookkeeping permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Single Entry Bookkeeping&lt;/h4&gt;
&lt;p&gt;A single entry bookkeeping is an accounting system that records only one entry for a transaction to the accounting records. The core information that single entry bookkeeping records is cash receipts and cash disbursements. Assets and liabilities needs to maintain separately in single entry bookkeeping.&lt;/p&gt;
&lt;p&gt;It is a very simply accounting system and only used by small businesses. Small enterprises has less information to maintain thus single entry bookkeeping is best for them. But when business grows and has a lot of information to maintain then it is better to move to double entry bookkeeping system as it can handle large amount of data providing advance reporting facilities.&lt;/p&gt;
&lt;h4 id=&quot;cashbook&quot;&gt;&lt;a href=&quot;#cashbook&quot; aria-label=&quot;cashbook permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Cashbook&lt;/h4&gt;
&lt;p&gt;In a single entry bookkeeping system transactions are recorded in cashbook. For every transaction there should be one entry in cashbook. Cashbook has different columns to record the transactions in each rows.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Date: This is the date of the transactions,&lt;/li&gt;
&lt;li&gt;Description: A short description about the transactions,&lt;/li&gt;
&lt;li&gt;Income/Expenses: The amount of the transactions,&lt;/li&gt;
&lt;li&gt;Balance: Summed up the amounts of all transactions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first entry of a single entry bookkeeping is the balance of the accounting period. Then all the transactions are recorded in each row. Last line of the cashbook is the closing balance of the accounting period. A typical cashbook of any business is below.&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
&lt;table class=&quot;table  table-hover&quot;&gt;
  &lt;thead class=&quot;thead-light&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;#&lt;/th&gt;
    &lt;th&gt;Date&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
    &lt;th&gt;Income&lt;/th&gt;
    &lt;th&gt;Expense&lt;/th&gt;
    &lt;th&gt;Balance&lt;/th&gt;
  &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tr&gt;
   &lt;td&gt;1&lt;/td&gt;
   &lt;td&gt;01-Apr&lt;/td&gt;
   &lt;td&gt;Beginning Balance&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td class=&quot;text-right&quot;&gt;$1000&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;2&lt;/td&gt;
   &lt;td&gt;05-Apr&lt;/td&gt;
   &lt;td&gt;Purchase shop supplies&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td class=&quot;text-right&quot;&gt;$200&lt;/td&gt;
   &lt;td class=&quot;text-right&quot;&gt;$800&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;3&lt;/td&gt;
   &lt;td&gt;10-Apr&lt;/td&gt;
   &lt;td&gt;Sale: Mr. Kamal&lt;/td&gt;
   &lt;td class=&quot;text-right&quot;&gt;$100&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td class=&quot;text-right&quot;&gt;$900&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;4&lt;/td&gt;
   &lt;td&gt;15-Apr&lt;/td&gt;
   &lt;td&gt;Sale: Mr. Kamrul&lt;/td&gt;
   &lt;td class=&quot;text-right&quot;&gt;$150&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td class=&quot;text-right&quot;&gt;$1050&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;5&lt;/td&gt;
   &lt;td&gt;20-Apr&lt;/td&gt;
   &lt;td&gt;Salary Paid&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td class=&quot;text-right&quot;&gt;$200&lt;/td&gt;
   &lt;td class=&quot;text-right&quot;&gt;$850&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;6&lt;/td&gt;
   &lt;td&gt;30-Apr&lt;/td&gt;
   &lt;td&gt;Closing Balance&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td class=&quot;text-right&quot;&gt;$850&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/br&gt;
&lt;h4 id=&quot;advantages&quot;&gt;&lt;a href=&quot;#advantages&quot; aria-label=&quot;advantages permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Advantages&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Single entry bookkeeping system is very simple and easy to maintain.&lt;/li&gt;
&lt;li&gt;No extra professional needed for single entry bookkeeping.&lt;/li&gt;
&lt;li&gt;It is perfect accounting system for a start-up business.&lt;/li&gt;
&lt;li&gt;Records income and expenses on a daily basis.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Income statement can easily be created because it records only income and expenses of the business.&lt;/p&gt;
&lt;/hr&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;disadvantages&quot;&gt;&lt;a href=&quot;#disadvantages&quot; aria-label=&quot;disadvantages permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Disadvantages&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Assets are not tracked on single entry accounting system so these can easily be stolen.&lt;/li&gt;
&lt;li&gt;How much amount the company is liable to others can not be determined.&lt;/li&gt;
&lt;li&gt;Errors can be made easily with this system and there is no good way to trace it.&lt;/li&gt;
&lt;li&gt;Single entry bookkeeping system is bad for audit purpose.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Others financial statements like balance sheet can not be made from this system because of less information.&lt;/p&gt;
&lt;/hr&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check out other accounting related post from
&lt;a href=&quot;https://www.nahidsaikat.com/category/accounting/&quot; title=&quot;Accounting Post&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Layered Architecture]]></title><description><![CDATA[The most common architectural pattern is the Layered Architectural pattern. It is the most widely used architectural pattern in today industry. This pattern is easy to implement and it has similarity with the organizational architecture.]]></description><link>https://www.nahidsaikat.com//blog/2017/10/11/layered-architecture/</link><guid isPermaLink="false">https://www.nahidsaikat.com//blog/2017/10/11/layered-architecture/</guid><pubDate>Wed, 11 Oct 2017 22:12:03 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;/media/pixabay/layered-architecture.jpg&quot; alt=&quot;Layered Architecture&quot; title=&quot;Layered Architecture&quot;&gt;
&lt;a href=&quot;https://pixabay.com/photos/floor-wood-hardwood-floors-1256804/&quot;&gt;&lt;center&gt;&lt;span style=&quot;color:black&quot;&gt;Image Source&lt;/span&gt;&lt;/center&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The most common architectural pattern is the Layered Architectural pattern. It is the most widely used architectural pattern in today industry. This pattern is easy to implement and it has similarity with the organizational architecture. This nature of the pattern makes people use it in their application.&lt;/p&gt;
&lt;p&gt;The concept of layered architecture pattern is that it breaks down the components of an application into separate layers. This layers are independent of each other. Layered architecture pattern does not specify the number and type of layers in an application, but most commonly there are four layers in an application, Presentation, Business, Persistence and Database. Presentation layer deals with the use interfaces and browser communications while business layers handles all the business logic in an application. Persistence layer ensure the persistency of data while database layers defines the physical database. Sometimes the business and persistence layers are combined to one business layer because of the closely relationship between these two layers. Thus small applications may have contain three layers while other large business applications may have contain five or more layers.&lt;/p&gt;
&lt;p&gt;Components in layered architecture has separation in concern. Means component in business layer deals only with the logic related to business. It does not need to know how data is represented in the interfaces or from where data is coming from. This layer only get data from persistence layer perform the business logic to that data and passes the data to the presentation layer.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Core Concepts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One of the most important concept of layered architecture is that the layers are closed. Closed layer means all the requests needs to go through each layer one by one to complete the request. It is not allowed for a request to bypass any layer. The presentation layer can not have direct access to persistence layer or database layer with out going through business layer. The reason why presentation layer can not have access to persistence layer can be termed as ‘layer of isolation’. Layer of isolation means changes to one layer does not have effect to other layers. If presentation layer can have access to persistence layer then it will be tightly coupled and any change made to persistence layer would have effect on both business layer and persistence layer. That will make the application tightly coupled and will reduce maintainability in future.&lt;/p&gt;
&lt;p&gt;But if business layer has some common task then it will be wise to separate these common task in separate optional service layer. If we place this service layer after business layer then all the request must cross this service layer to go to persistence layer. Which should not be. Because all request may not need to access this service layer. But every request have to pass the service layer because of this architectures nature. To remove this problem there is a concept called open layer. Open layer is a layer that can be by-passed while passing the request through layers. In our case if we make service layer as open then the request can omit the layer to go to persistence layer from the business layer. Which eliminates the problem related to optional layer.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Anti-Pattern&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Layered architecture pattern is a pattern that has easy maintainability. One can easily adapt it for their application if he does not have any idea about what architectural pattern he should follow. Because this architectural pattern is a solid general purpose pattern. However this pattern needs a proper concern while using it because in some particular cases it can act like an anti-pattern.&lt;/p&gt;
&lt;p&gt;Common scenario of layered architecture is that request will go through each layer to process a request. But there can be some request on which there is no need to apply any logic. But those requests also needs to pass all of the layers. Which may create performance issue. All the application contains this kind of request where applying business logic is not required. But it is okay if your application has 20 percent of these kind of request. It may contain 80 percent request that needs to perform business logic and others 20 percent does not require to apply logic. But if reverse case occurred then it is better to consider architecture once again. Although open layer can reduce the problem but it also make the application closely coupled.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros and Cons&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Layered architecture is easy to adapt quickly (for inexperienced person).&lt;/li&gt;
&lt;li&gt;As the application is divided into layers which increase the maintainability of application.&lt;/li&gt;
&lt;li&gt;Separate independent layers can be mocked easily to perform test.
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Layered architecture has poor perfect for continuously changing applications.&lt;/li&gt;
&lt;li&gt;Requests need to pass through all the layers which create performance issue.&lt;/li&gt;
&lt;li&gt;Depending on implementation layered architecture can have deployment issue. Sometimes applications that  followed layered architecture may take huge time to compile each layer which can make deployment process slower.
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Best For&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Following are the cases where layered architecture is good to implement -&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If your team has less experience then layer architecture is a good choice.&lt;/li&gt;
&lt;li&gt;For the application the needs to build quickly.&lt;/li&gt;
&lt;li&gt;Business or enterprise application that needs to maintain traditional business process.&lt;/li&gt;
&lt;li&gt;Maintainability and test-ability of layered architecture is high. If application requires these two benefits then it will be best choice.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[GST - Input Tax Credit]]></title><description><![CDATA[There are two types of transactions happen in any business, inward supply and outward supply. Business procure raw materials, semi-finished or finished goods which is inward supply and after making the product they sale it, which is outward supply.]]></description><link>https://www.nahidsaikat.com//blog/2017/09/28/gst-input-tax-credit/</link><guid isPermaLink="false">https://www.nahidsaikat.com//blog/2017/09/28/gst-input-tax-credit/</guid><pubDate>Thu, 28 Sep 2017 22:12:03 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;/media/pixabay/gst-input-tax-credit.jpg&quot; alt=&quot;GST - Input Tax Credit&quot; title=&quot;GST - Input Tax Credit&quot;&gt;
&lt;a href=&quot;https://pixabay.com/illustrations/tax-taxes-taxation-accountant-1040-957457/&quot;&gt;&lt;center&gt;&lt;span style=&quot;color:black&quot;&gt;Image Source&lt;/span&gt;&lt;/center&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;From 1st July, 2017 GST is applied on all the goods and services in all over the India. There are five different rates of GST - 0%, 5%, 12%, 18% and 28% - which are applied on goods and services. Previously different states applies different rates of tax on goods and services for manufacturing and other business. In GST all the taxes are combined in one tax system. Input tax credit is one of the important concept in GST and it is also the most confusing topic of GST. In this blog article we will understand input tax credit mechanism in GST.
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h5 id=&quot;what-is-input-tax-credit&quot;&gt;&lt;a href=&quot;#what-is-input-tax-credit&quot; aria-label=&quot;what is input tax credit permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What is Input Tax Credit?&lt;/h5&gt;
&lt;p&gt;There are two types of transactions happen in any business, inward supply and outward supply. Business procure raw materials, semi-finished or finished goods which is inward supply and after making the product they sale it, which is outward supply. In GST inward supplies are termed as input and outward supplies are termed as output. Business needs to pay tax for the inward supply and also they collect tax while outward supply. But after GST, businesses can set off the amount they paid at the time of inward supply while paying sales tax collected from outward supply to Government. This process of setting off taxes is called input tax credit. In general sense, the adjustment of output tax by the input tax is input tax credit.&lt;/p&gt;
&lt;p&gt;Input tax credit mechanism bring lots of benefits in Indian market. One of the most important benefit is it removes the cascading effect of tax. What is cascading effect of tax? cascading effect of tax is ‘tax on tax’. In the following example cascading effect of tax and how GST removes it will be cleared.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;
In GST resume: Suppose a business man buys some cloth for RS 1000 having the GST of RS 100 as the rate is 10%. Now after making the shirt the business man selling it at RS 2000 + tax. He is adding the value of RS 1000. Consider the GST on shirt is 12%. Thus the final price of shirt will be RS 2000 + RS 240 = RS 2240. As he already paid his input tax of RS 100 so he can take a credit of RS 100 and needs to pay only RS 140 to Government as GST.&lt;/p&gt;
&lt;p&gt;In previous regime: In previous regime as he paid a tax of RS 100, so when selling the shirt the price he will count is RS 2000 + RS 100 which is equals of RS 2100 (as he adds a value of RS 1000). Now 12% of RS 2100 is RS 252 thus final price of shirt will be RS 2100 + RS 252 = RS 2352. Which will increase the price of the shirt by RS 112.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Types of GST:&lt;/strong&gt; In GST there are three types of taxes, CGST, SGST and IGST.&lt;/p&gt;
&lt;p&gt;CGST will be applied for the intra-state transactions by Central Government.&lt;/p&gt;
&lt;p&gt;SGST will be applied for the intra-state transactions by State Government.&lt;/p&gt;
&lt;p&gt;IGST will be applied for the inter-state transactions by Central Government.&lt;/p&gt;
&lt;p&gt;Adjustment of the credits of these taxes are allowed with the following rules.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CGST credit can be used to adjust the CGST liability first, if there is a credit left over then it will be used to adjust IGST liability.&lt;/li&gt;
&lt;li&gt;SGST credit can be used to adjust the SGST liability first, if there is a credit left over then it will be used to adjust IGST liability.&lt;/li&gt;
&lt;li&gt;IGST credit can be used to adjust the IGST liability first, if there is a credit left over then it will be first used to adjust CGST liability and then SGST liability.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Suppose M K Aluminium Ltd. has CGST credit of RS 200, CGST liability of RS 300, SGST credit of RS 250, SGST liability of RS 350, IGST credit of RS 500 and IGST liability of RS 200.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;M K Aluminium will set off CGST liability of RS 200 by CGST credit of RS 200 remaining CGST liability is RS 100.&lt;/li&gt;
&lt;li&gt;The company will also set off SGST liability of RS 250 by SGST credit of RS 250 remaining SGST liability is RS 100.&lt;/li&gt;
&lt;li&gt;And finally M K Aluminium will use IGST credit of RS 500 to set off IGST liability of RS 200, then remaining CGST liability of RS 100 and at the end SGST liability of RS 100 with remaining IGST credit is RS 100 which will be carry forward.
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;reconciliation-of-itc&quot;&gt;&lt;a href=&quot;#reconciliation-of-itc&quot; aria-label=&quot;reconciliation of itc permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reconciliation of ITC&lt;/h5&gt;
&lt;p&gt;Suppose HH International has bought 5 tons of Aluminium from KK Groups. They both are registered under GST. They will reconcile and the receiver will take the input tax credit by following steps -&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;KK Groups will file GSTR-1 in GST portal.&lt;/li&gt;
&lt;li&gt;The information will be automatically be filled up in GSTR-2A of HH International.&lt;/li&gt;
&lt;li&gt;HH International will check the detail and do necessary modification and file GSTR-2 by pulling information from GSTR-2A. The correct input tax credit will be credited to the electronic ledger of HH International.&lt;/li&gt;
&lt;li&gt;KK Groups will see the modification make by HH International and accept it in GSTR-1A.&lt;/li&gt;
&lt;li&gt;Finally when KK Groups will file GSTR-3 HH International will be able to avail the input tax credit.
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;pre-requisite-to-avail-itc&quot;&gt;&lt;a href=&quot;#pre-requisite-to-avail-itc&quot; aria-label=&quot;pre requisite to avail itc permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Pre-requisite to avail ITC&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;The person must be registered under GST.&lt;/li&gt;
&lt;li&gt;He should have tax invoice.&lt;/li&gt;
&lt;li&gt;The receiver should receive the goods or services.&lt;/li&gt;
&lt;li&gt;The tax is already paid by supplier.&lt;/li&gt;
&lt;li&gt;He has furnished the return files.&lt;/li&gt;
&lt;li&gt;In case of installment supply he is allowed to take ITC after final installment.&lt;/li&gt;
&lt;li&gt;He should pay the supplier within 180 days from the date of invoice.
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&quot;document-on-which-itc-is-allowed&quot;&gt;&lt;a href=&quot;#document-on-which-itc-is-allowed&quot; aria-label=&quot;document on which itc is allowed permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Document on which ITC is allowed&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;Invoice issued by a supplier.&lt;/li&gt;
&lt;li&gt;Invoice by receiver as the proof of tax paid.&lt;/li&gt;
&lt;li&gt;A debit note issued by a supplier.&lt;/li&gt;
&lt;li&gt;Bill of entry prescribed by Customs Department.&lt;/li&gt;
&lt;li&gt;Revised invoice by supplier.&lt;/li&gt;
&lt;li&gt;Invoice issued by Input Service Distributor.
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&quot;itc-is-allows-only-on-business-purpose-goods-or-services&quot;&gt;&lt;a href=&quot;#itc-is-allows-only-on-business-purpose-goods-or-services&quot; aria-label=&quot;itc is allows only on business purpose goods or services permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ITC is allows only on business purpose goods or services&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;No ITC can be availed if the goods or service or both are used for non-business purpose.&lt;/li&gt;
&lt;li&gt;If partial goods are used for business and partial are for non-business purpose then ITC is allowed only on business portion.&lt;/li&gt;
&lt;li&gt;When goods or services are partially used for exempted goods or services making and partially used for non-exempted goods or services making, then ITC is allowed on non-exempted goods or services portion.&lt;/li&gt;
&lt;li&gt;ITC is now allowed on exempted supply.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Click &lt;a href=&quot;https://www.nahidsaikat.com/category/accounting/&quot; title=&quot;Accounting Post&quot;&gt;here&lt;/a&gt; for other accounting related post and &lt;a href=&quot;https://www.nahidsaikat.com/tag/indian-gst/&quot; title=&quot;Indian GST&quot;&gt;here&lt;/a&gt; for other GST related post.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[GST - Refund Voucher]]></title><link>https://www.nahidsaikat.com//blog/2017/09/16/gst-refund-voucher/</link><guid isPermaLink="false">https://www.nahidsaikat.com//blog/2017/09/16/gst-refund-voucher/</guid><pubDate>Sat, 16 Sep 2017 22:12:03 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;/media/pixabay/gst-refund-voucher.jpg&quot; alt=&quot;GST - Refund Voucher&quot; title=&quot;GST - Refund Voucher&quot;&gt;
&lt;a href=&quot;https://pixabay.com/photos/copy-space-text-box-cardboard-pack-2535266/&quot;&gt;&lt;center&gt;&lt;span style=&quot;color:black&quot;&gt;Image Source&lt;/span&gt;&lt;/center&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Generally manufacturers demand advance to delivery a bulk of products. Service providers also asks for an advance payment for completion of a service. When a manufacturer gets paid of an advance amount for an order then at that moment he/she needs to issue a receipt voucher against that advance. But in future if that order gets cancelled then the manufacturer will issue a refund voucher to the person who paid the advance.&lt;/p&gt;
&lt;p&gt;Same case will play for the service providers also. A service provider requires to issue a receipt voucher when he/she gets paid of an advance amount for a service, and also needs to issue a refund voucher if the service order gets cancelled in future.&lt;/p&gt;
&lt;h5 id=&quot;example&quot;&gt;&lt;a href=&quot;#example&quot; aria-label=&quot;example permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Example:&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Ganga Electronics Ltd. gets an order to supply 50 laptop computer (each laptop is for RS. 40,000) from Summer Info Technologies for their new office. Ganga Electronics Ltd. gets a payment of RS. 5,00,000 in advance. Thus Ganga Electronics Ltd. will issue a receipt voucher to Summer Info Technologies. But after some days Summer Info Technologies cancelled the order for their internal complexities. Now Ganga Electronics Ltd. needs to issue a refund voucher against the cancellation of the order.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Harsa Travel Agency gets an order to transport some goods from Mumbai to New Delhi from a company called Rainbow Industries Ltd. The agency gets an advance payment of RS. 30,000. But due to some political violations in New Delhi Rainbow Industries Ltd. has cancelled the order. Now Harsa Travel Agency should issue a receipt voucher at the time of advance payment and a refund voucher at the time of cancellation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The refund voucher that should be issued will contain the following information -&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Name, address and GSTIN of the supplier.&lt;/li&gt;
&lt;li&gt;A consecutive serial number for refund voucher not exceeding sixteen characters, containing alphabets or numerals or special characters-hyphen or dash and slash, unique for a financial year.&lt;/li&gt;
&lt;li&gt;Date of its issue of refund voucher.&lt;/li&gt;
&lt;li&gt;Name, address and GSTIN of the recipient, if registered under GST. In case the recipient is not registered under GST, then name, address and place of supply.&lt;/li&gt;
&lt;li&gt;Number and date of receipt voucher.&lt;/li&gt;
&lt;li&gt;Description of goods or services in respect of which refund is made.&lt;/li&gt;
&lt;li&gt;The amount of refund made.&lt;/li&gt;
&lt;li&gt;Rate of GST tax charged on the transaction like CGST, SGST, IGST and GST Cess.&lt;/li&gt;
&lt;li&gt;Amount of GST tax paid by the recipient.&lt;/li&gt;
&lt;li&gt;If reverse charge was applicable.&lt;/li&gt;
&lt;li&gt;Signature or digital signature of the supplier or his authorized representative.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Click &lt;a href=&quot;https://www.nahidsaikat.com/category/accounting/&quot; title=&quot;Accounting Post&quot;&gt;here&lt;/a&gt; for other accounting related post and &lt;a href=&quot;https://www.nahidsaikat.com/tag/indian-gst/&quot; title=&quot;Indian GST&quot;&gt;here&lt;/a&gt; for other GST related post.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[GST - Advance Receive]]></title><description><![CDATA[Taking advance against an order is a common scenario in business. Usually suppliers take advance from customers to ensure that the order will not be cancelled. Before GST there was no effect of advance on tax.]]></description><link>https://www.nahidsaikat.com//blog/2017/09/03/gst-advanced-receive/</link><guid isPermaLink="false">https://www.nahidsaikat.com//blog/2017/09/03/gst-advanced-receive/</guid><pubDate>Sun, 03 Sep 2017 22:12:03 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;/media/pixabay/gst-advance-receive.jpg&quot; alt=&quot;GST - Advance Receive&quot; title=&quot;GST - Advance Receive&quot;&gt;
&lt;a href=&quot;https://pixabay.com/illustrations/invoice-cash-payments-concept-3739354/&quot;&gt;&lt;center&gt;&lt;span style=&quot;color:black&quot;&gt;Image Source&lt;/span&gt;&lt;/center&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Taking advance against an order is a common scenario in business. Usually suppliers take advance from customers to ensure that the order will not be cancelled. Before GST there was no effect of advance on tax. Tax was taken when goods are supplied to customers. However services suppliers needs to pay tax on advance. But under GST tax should be paid on advance for both services and goods. Tax rate will be applicable of the goods and/or services on which the advanced is being received. Based on the place of goods and/or services receiver, CGST + SGST (Intra-state) or IGST (Inter-state) will be applicable.&lt;/p&gt;
&lt;p&gt;The supplier will have to issue a &lt;strong&gt;Receive Voucher&lt;/strong&gt; for the advance received. However as tax needs to be paid against that advance, the voucher should contains the tax information as well. Details that should be mentioned in an advance receive voucher are as below -&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Supplier’s name, address and GSTIN&lt;/li&gt;
&lt;li&gt;Serial number of the receipt voucher, not exceeding 16 characters, containing alphabets or numerals or special characters hyphen (-) or slash (/). It must be unique for a financial year&lt;/li&gt;
&lt;li&gt;Date of issue&lt;/li&gt;
&lt;li&gt;If the recipient is registered, the recipient’s name, address and GSTIN or UID&lt;/li&gt;
&lt;li&gt;Description of the goods or services&lt;/li&gt;
&lt;li&gt;Amount of advance taken&lt;/li&gt;
&lt;li&gt;Rate of tax (CGST, SGST, IGST, UGST or Cess)&lt;/li&gt;
&lt;li&gt;Amount of tax (CGST, SGST, IGST, UGST or Cess)&lt;/li&gt;
&lt;li&gt;If the supply is interstate, the place of supply, along with the state name and the state code&lt;/li&gt;
&lt;li&gt;Whether tax is payable on reverse charge&lt;/li&gt;
&lt;li&gt;Signature or digital signature of the supplier or his authorized representative&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If the tax rate is not known at the time of advance received then default 18% tax will be applicable.&lt;/p&gt;
&lt;p&gt;In case it is not sure whether it is an intra-state or inter-state transaction the advance receive voucher should be issued as an inter-state transaction.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; Suppose ‘A’ gives of RS. 20 lakhs to ‘B’ as advance for the stationary goods whose  total cost is RS. 40 lakhs. Both ‘A’ and ‘B’ are in same state so CGST and SGST will be applied. Suppose total GST of RS. 20 lskhs is RS. 2 lakhs. So ‘A’ needs to pay RS. 2 lakhs as GST at the time of advance payment. After 2 weeks ‘B’ prepared all the goods and supplied it to ‘A’. He will issue an invoice showing total costs of RS. 40 lakhs and take GST on the remaining amount. At the time of issuing of invoice ‘A’ will have to pay RS. 22 lakhs including GST to ‘B’.&lt;/p&gt;
&lt;p&gt;The invoice issued from supplier should mention the advance already received.&lt;/p&gt;
&lt;p&gt;One important thing to be noted here that the buyer would not take credit on the GST he/she paid at the time of advance payment. He/she is allowed to take credit only after getting the tax invoice from supplier.&lt;/p&gt;
&lt;p&gt;GST on advance payment is a very sensitive topic. Both the supplier and the buyer will have to pay attention when dealing with it. They both have to maintain proper accounting on advance payment/receive.&lt;/p&gt;
&lt;p&gt;Click &lt;a href=&quot;https://www.nahidsaikat.com/category/accounting/&quot; title=&quot;Accounting Post&quot;&gt;here&lt;/a&gt; for other accounting related post and &lt;a href=&quot;https://www.nahidsaikat.com/tag/indian-gst/&quot; title=&quot;Indian GST&quot;&gt;here&lt;/a&gt; for other GST related post.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[GST - Job Work Process]]></title><description><![CDATA[Job work process is one of the common activities in manufacturing industries. There are several processes like initial process, intermediate process, assembly, packing, final process etc. are being carried out by a manufacturer.]]></description><link>https://www.nahidsaikat.com//blog/2017/08/26/gst-job-work-process/</link><guid isPermaLink="false">https://www.nahidsaikat.com//blog/2017/08/26/gst-job-work-process/</guid><pubDate>Sat, 26 Aug 2017 22:12:03 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;/media/pixabay/gst-job-work-process.jpg&quot; alt=&quot;GST - Job Work Process&quot; title=&quot;GST - Job Work Process&quot;&gt;
&lt;a href=&quot;https://pixabay.com/photos/book-robot-cube-simulation-3022615/&quot;&gt;&lt;center&gt;&lt;span style=&quot;color:black&quot;&gt;Image Source&lt;/span&gt;&lt;/center&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Job work process is one of the common activities in manufacturing industries. There are several processes like initial process, intermediate process, assembly, packing, final process etc. are being carried out by a manufacturer. There could be a situation when a process carried out by a manufacturer is very costly. That time it could be cost effective to let the process being carried out by another person. In general sense this is named as job work process.&lt;/p&gt;
&lt;p&gt;According to section 2(68) of Indian CGST Act 2017, any process or treatment undertaken by a person on goods belonging to another registered person is called job work. Here the person who performs the process is termed as ‘job worker’ and the owner of the goods is termed as the ‘principal’. One thing to be noted is that the ownership of the goods is not transferred. The job worker is just carried out the process specified by the principal on the goods.&lt;/p&gt;
&lt;h4 id=&quot;procedure-of-job-work-under-gst&quot;&gt;&lt;a href=&quot;#procedure-of-job-work-under-gst&quot; aria-label=&quot;procedure of job work under gst permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Procedure of job work under GST&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Goods are send out to the job workers place of business with a challan. It is not important that the goods needs to be send out from the principals place of business. Goods can be directly send out to the job workers place of business from the supplier of the goods of principal.&lt;/li&gt;
&lt;li&gt;The supply date will be count if the goods are supplied from the principals place of business. In case the goods are directly supplied to job worker from the supplier of the goods of principal, the receive date of the goods by job worker will be counted.&lt;/li&gt;
&lt;li&gt;No GST will be applicable if the goods are brought back by the principal within 1 year in case of inputs, semi-finished or finished goods and within 3 years in case of capital goods.&lt;/li&gt;
&lt;li&gt;The principal is permitted to supply the goods to his customers from the place of business of the job worker in between 1 year or 3 years respectively with payment of GST inside India and with or without payment of GST outside India.&lt;/li&gt;
&lt;li&gt;If the goods are not brought back or supplied within 1 year or 3 years respectively then it will be assumed that  the goods are being supplied from the principal to the job worker on the date specified in section B above. In this case principal will pay the GST with interest.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;GST will be applicable on the charge charged by the job worker to the principal and it will be paid by the registered  job worker.&lt;/p&gt;
&lt;p&gt;No GST will be applicable on the moulds and dies, jigs and fixtures or tools sent from principal to job worker.&lt;/p&gt;
&lt;p&gt;If the job worker is not registered then the principal needs to mention the job workers place of business as an additional place of business in his GST registration.&lt;/p&gt;
&lt;p&gt;Section 19 of the CGST Act, 2017 provides that the principal (who send the goods to job worker) shall be entitled to take the credit of  input tax paid on the inputs sent to the job worker for job work.&lt;/p&gt;
&lt;p&gt;Waste or scrap generated in any process can be sold out by the payment of tax by the job worker (if registered) or by principal (if job worker is unregistered).&lt;/p&gt;
&lt;p&gt;The challan issued to the job worker when goods are send out to job workers place of business must contains the following information -&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;date and number of the delivery challan&lt;/li&gt;
&lt;li&gt;name, address and GSTIN of the consigner and consignee&lt;/li&gt;
&lt;li&gt;HSN code, description and quantity of goods&lt;/li&gt;
&lt;li&gt;Taxable value, tax rate, tax amount- CGST, SGST, IGST, UTGST separately&lt;/li&gt;
&lt;li&gt;Place of supply and signature&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Click &lt;a href=&quot;https://www.nahidsaikat.com/category/accounting/&quot; title=&quot;Accounting Post&quot;&gt;here&lt;/a&gt; for other accounting related post and &lt;a href=&quot;https://www.nahidsaikat.com/tag/indian-gst/&quot; title=&quot;Indian GST&quot;&gt;here&lt;/a&gt; for other GST related post.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Brief Statement of SOLID Principles]]></title><description><![CDATA[SOLID principle is one of the most well known principle in software community. It is intendent to make software designs more understandable, flexible and maintainable.]]></description><link>https://www.nahidsaikat.com//blog/2017/07/26/solid-principles</link><guid isPermaLink="false">https://www.nahidsaikat.com//blog/2017/07/26/solid-principles</guid><pubDate>Wed, 26 Jul 2017 22:40:32 GMT</pubDate><content:encoded>&lt;h2 id=&quot;s--single-responsibility-principle&quot;&gt;&lt;a href=&quot;#s--single-responsibility-principle&quot; aria-label=&quot;s  single responsibility principle permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;S – Single Responsibility Principle&lt;/h2&gt;
&lt;p&gt;A class or module should have one and only one reason to change.&lt;/p&gt;
&lt;h2 id=&quot;o--open-closed-principle&quot;&gt;&lt;a href=&quot;#o--open-closed-principle&quot; aria-label=&quot;o  open closed principle permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;O – Open Closed Principle&lt;/h2&gt;
&lt;p&gt;Software entities (classes, modules, functions etc.) should be open for extension but closed for modification.&lt;/p&gt;
&lt;h2 id=&quot;l--liskov-substitution-principle&quot;&gt;&lt;a href=&quot;#l--liskov-substitution-principle&quot; aria-label=&quot;l  liskov substitution principle permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;L – Liskov Substitution Principle&lt;/h2&gt;
&lt;p&gt;Functions that use references of base classes must be able to use objects of the derived class without knowing it.&lt;/p&gt;
&lt;h2 id=&quot;i--interface-segregation-principle&quot;&gt;&lt;a href=&quot;#i--interface-segregation-principle&quot; aria-label=&quot;i  interface segregation principle permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;I – Interface Segregation Principle&lt;/h2&gt;
&lt;p&gt;Clients should not be forced to depend on methods they do not use.&lt;/p&gt;
&lt;h2 id=&quot;d--dependency-inversion-principle&quot;&gt;&lt;a href=&quot;#d--dependency-inversion-principle&quot; aria-label=&quot;d  dependency inversion principle permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;D – Dependency Inversion Principle&lt;/h2&gt;
&lt;p&gt;=&gt; High-level modules should not depend on low-level modules. Both should depend on abstractions.&lt;/p&gt;
&lt;p&gt;=&gt; Abstractions should not depend on details, details should depend on abstractions.&lt;/p&gt;</content:encoded></item></channel></rss>