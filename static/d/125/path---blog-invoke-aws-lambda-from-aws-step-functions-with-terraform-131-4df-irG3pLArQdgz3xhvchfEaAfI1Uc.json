{"data":{"markdownRemark":{"id":"254c955b-c971-5d99-8de7-f51227b6c0a9","html":"<p><img src=\"/media/unsplash/lambda-step-function-terraform.jpg\" alt=\"Invoke AWS Lambda from AWS Step Functions with Terraform\" title=\"Invoke AWS Lambda from AWS Step Functions with Terraform\"></p>\n<center><span>Photo by <a href=\"https://unsplash.com/@tateisimikito?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Jukan Tateisi</a> on <a href=\"https://unsplash.com/s/photos/step?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span></center>\n<br>\n<h4 id=\"terraform\"><a href=\"#terraform\" aria-label=\"terraform permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Terraform</h4>\n<p><a href=\"https://www.terraform.io/intro/index.html\" title=\"Terraform\">Terraform</a> is an open-source infrastructure as code software tool. It allows building, changing, and versioning the infrastructure. Terraform uses a declarative approach to define the infrastructure. Users will define the end infrastructure that they want and terraform will do the rest of the thing to have that infrastructure.</p>\n<p>Terraform allows its users to define and describe the infrastructure using a declarative configuration language known as <a href=\"https://github.com/hashicorp/hcl\" title=\"HCL\">HCL or HashiCorp Configuration Language</a>. When the end infrastructure is defined terraform will do the plan and then executes this plan to provision that infrastructure.</p>\n<p>Terraform supports all the public clouds like <a href=\"https://aws.amazon.com/,\" title=\"AWS\">Amazon Web Services</a>, <a href=\"https://azure.microsoft.com/en-us/\" title=\"Azure\">Microsoft Azure</a>, <a href=\"https://cloud.google.com/\" title=\"GCP\">Google Cloud Platform</a> aw well as private clouds such as <a href=\"https://www.vmware.com/products/vsphere.html\" title=\"vSphere\">VMWare vSphere</a>, <a href=\"https://cloudstack.apache.org/\" title=\"CloudStack\">CloudStack</a>, or <a href=\"https://www.openstack.org/\" title=\"OpenStack\">OpenStack</a>.</p>\n<p>In this article, we will define an infrastructure for the AWS provider which will have an <a href=\"https://aws.amazon.com/lambda/\" title=\"Lambda\">AWS Lambda</a> and <a href=\"https://aws.amazon.com/step-functions/\" title=\"Step Functions\">AWS Step Functions</a> working together.</p>\n<h4 id=\"aws-lambda\"><a href=\"#aws-lambda\" aria-label=\"aws lambda permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AWS Lambda</h4>\n<p><a href=\"https://aws.amazon.com/lambda/\" title=\"AWS Lambda\">AWS Lambda</a> is a Function-as-a-Service platform by <a href=\"https://aws.amazon.com/\" title=\"Amazon Web Services\">Amazon Web Services</a>. It can run code without provisioning the servers. This allows the developers to focus only on code as AWS Lambda is taking care of everything else.</p>\n<p>There are three core components of AWS Lambda. The <strong>handler function</strong> is the main function that will be run when lambda executes. <strong>Event Object</strong> is the first argument passed to the function when it gets executed. It contains information about the event invoking the lambda. And the <strong>Context Object</strong> contains lambda runtime information.</p>\n<p>So let’s define our handler function for the lambda. For that create a folder <code class=\"language-text\">lambda</code> and inside that folder create a file <code class=\"language-text\">handler.py</code>. The code for the handler function will be as below.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> logging\n\nLOGGER <span class=\"token operator\">=</span> logging<span class=\"token punctuation\">.</span>getLogger<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nLOGGER<span class=\"token punctuation\">.</span>setLevel<span class=\"token punctuation\">(</span>logging<span class=\"token punctuation\">.</span>INFO<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    LOGGER<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Event Object: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>event<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n    LOGGER<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Context Object: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>context<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n    event<span class=\"token punctuation\">[</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'value'</span>\n    <span class=\"token keyword\">return</span> event</code></pre></div>\n<p>This is a super simple function. In the function, we are logging the event object and context object and set <code class=\"language-text\">value</code> as the value of the key <code class=\"language-text\">key</code> in the event object. Finally, we are returning the updated event object.</p>\n<p>Now let’s write some terraform code for this lambda function. For that create a folder <code class=\"language-text\">terraform</code> and inside that folder create a file <code class=\"language-text\">lambda.tf</code>. The content of this file will be as follows.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">// Lambda <span class=\"token keyword\">function</span>\nresource <span class=\"token string\">\"aws_lambda_function\"</span> <span class=\"token string\">\"lambda_function\"</span> <span class=\"token punctuation\">{</span>\n  function_name    <span class=\"token operator\">=</span> var.lambda_function_name\n  filename         <span class=\"token operator\">=</span> data.archive_file.lambda_zip_file.output_path\n  source_code_hash <span class=\"token operator\">=</span> data.archive_file.lambda_zip_file.output_base64sha256\n  handler          <span class=\"token operator\">=</span> <span class=\"token string\">\"handler.handler\"</span>\n  role             <span class=\"token operator\">=</span> aws_iam_role.lambda_assume_role.arn\n  runtime          <span class=\"token operator\">=</span> <span class=\"token string\">\"python3.8\"</span>\n\n  lifecycle <span class=\"token punctuation\">{</span>\n    create_before_destroy <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n// Zip of lambda handler\ndata <span class=\"token string\">\"archive_file\"</span> <span class=\"token string\">\"lambda_zip_file\"</span> <span class=\"token punctuation\">{</span>\n  output_path <span class=\"token operator\">=</span> <span class=\"token string\">\"<span class=\"token variable\">${path.module}</span>/lambda_zip/lambda.zip\"</span>\n  source_dir  <span class=\"token operator\">=</span> <span class=\"token string\">\"<span class=\"token variable\">${path.module}</span>/../lambda\"</span>\n  excludes    <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"__init__.py\"</span>, <span class=\"token string\">\"*.pyc\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token function\">type</span>        <span class=\"token operator\">=</span> <span class=\"token string\">\"zip\"</span>\n<span class=\"token punctuation\">}</span>\n\n// Lambda IAM assume role\nresource <span class=\"token string\">\"aws_iam_role\"</span> <span class=\"token string\">\"lambda_assume_role\"</span> <span class=\"token punctuation\">{</span>\n  name               <span class=\"token operator\">=</span> <span class=\"token string\">\"<span class=\"token variable\">${var.lambda_function_name}</span>-assume-role\"</span>\n  assume_role_policy <span class=\"token operator\">=</span> data.aws_iam_policy_document.lambda_assume_role_policy_document.json\n\n  lifecycle <span class=\"token punctuation\">{</span>\n    create_before_destroy <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n// IAM policy document <span class=\"token keyword\">for</span> lambda assume role\ndata <span class=\"token string\">\"aws_iam_policy_document\"</span> <span class=\"token string\">\"lambda_assume_role_policy_document\"</span> <span class=\"token punctuation\">{</span>\n  version <span class=\"token operator\">=</span> <span class=\"token string\">\"2012-10-17\"</span>\n\n  statement <span class=\"token punctuation\">{</span>\n    sid     <span class=\"token operator\">=</span> <span class=\"token string\">\"LambdaAssumeRole\"</span>\n    effect  <span class=\"token operator\">=</span> <span class=\"token string\">\"Allow\"</span>\n    actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"sts:AssumeRole\"</span><span class=\"token punctuation\">]</span>\n\n    principals <span class=\"token punctuation\">{</span>\n      identifiers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"lambda.amazonaws.com\"</span><span class=\"token punctuation\">]</span>\n      <span class=\"token function\">type</span>        <span class=\"token operator\">=</span> <span class=\"token string\">\"Service\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here we are creating two resources <code class=\"language-text\">aws_lambda_function</code> and <code class=\"language-text\">aws_iam_role</code>. The lambda function that we defined earlier is being zipped in <code class=\"language-text\">archive_file</code> and it is also being referred to in <code class=\"language-text\">aws_lambda_function</code> resource. We are creating <code class=\"language-text\">aws_iam_role</code> resources as lambda requires it to run the function. The policy document of this resource is defined in <code class=\"language-text\">aws_iam_policy_document</code> the data object.</p>\n<p>One important thing to note here is that we are taking the name of the lambda function from <code class=\"language-text\">var.lambda_function_name</code>. Terraform allows us to define some variables and use them in the terraform files. So let’s create a file <code class=\"language-text\">vars.tf</code> that will contain all of our variables. For now, it contains only the following.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">variable <span class=\"token string\">\"lambda_function_name\"</span> <span class=\"token punctuation\">{</span>\n  description <span class=\"token operator\">=</span> <span class=\"token string\">\"The name of the lambda function.\"</span>\n  type <span class=\"token operator\">=</span> <span class=\"token keyword\">string</span>\n  <span class=\"token keyword\">default</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"test_lambda\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And at this point, the directory structure will be as below.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.\n+-- lambda\n|   +-- handler.py\n+-- terraform\n|   +-- lambda.tf\n|   +-- vars.tf</code></pre></div>\n<br>\n<h4 id=\"aws-step-functions\"><a href=\"#aws-step-functions\" aria-label=\"aws step functions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AWS Step Functions</h4>\n<p><a href=\"https://aws.amazon.com/step-functions/\" title=\"AWS Step Functions\">AWS Step Functions</a> is the orchestration of serverless microservice architecture. It divides a complex business workflow into smaller steps and implements them in AWS Lambda or other AWS services. The main building blocks of AWS Step Functions are the states. There are several types of state like <a href=\"https://docs.aws.amazon.com/step-functions/latest/dg/concepts-states.html\" title=\"States\">Task, Pass, Choice, Wait, Parallel, Map, Fail, and Succeed</a>. The states are defined in <a href=\"https://states-language.net/\" title=\"AWS States Language\">AWS States Language</a> which is a JSON-based specification language. AWS Step Functions execute the states according to the order in which they are defined and retry them if any error or exception occurs.</p>\n<p>Now that we know what AWS Step Functions actually is, it’s time to define a step function in terraform which will invoke the lambda that we have defined earlier. For that create a file <code class=\"language-text\">step_function.tf</code> inside the <code class=\"language-text\">terraform</code> folder and put the below code in that file.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">resource <span class=\"token string\">\"aws_sfn_state_machine\"</span> <span class=\"token string\">\"sfn_state_machine\"</span> <span class=\"token punctuation\">{</span>\n  name     <span class=\"token operator\">=</span> var.step_function_name\n  role_arn <span class=\"token operator\">=</span> aws_iam_role.step_function_role.arn\n\n  definition <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;&lt;</span>EOF\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"Comment\"</span><span class=\"token keyword\">:</span> <span class=\"token string\">\"Invoke AWS Lambda from AWS Step Functions with Terraform\"</span>,\n    <span class=\"token string\">\"StartAt\"</span><span class=\"token keyword\">:</span> <span class=\"token string\">\"HelloWorld\"</span>,\n    <span class=\"token string\">\"States\"</span><span class=\"token keyword\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"HelloWorld\"</span><span class=\"token keyword\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"Type\"</span><span class=\"token keyword\">:</span> <span class=\"token string\">\"Task\"</span>,\n        <span class=\"token string\">\"Resource\"</span><span class=\"token keyword\">:</span> <span class=\"token string\">\"<span class=\"token variable\">${aws_lambda_function.lambda_function.arn}</span>\"</span>,\n        <span class=\"token string\">\"End\"</span><span class=\"token keyword\">:</span> <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  EOF\n<span class=\"token punctuation\">}</span>\n\nresource <span class=\"token string\">\"aws_iam_role\"</span> <span class=\"token string\">\"step_function_role\"</span> <span class=\"token punctuation\">{</span>\n  name               <span class=\"token operator\">=</span> <span class=\"token string\">\"<span class=\"token variable\">${var.step_function_name}</span>-role\"</span>\n  assume_role_policy <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;&lt;</span>-EOF\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"Version\"</span><span class=\"token keyword\">:</span> <span class=\"token string\">\"2012-10-17\"</span>,\n    <span class=\"token string\">\"Statement\"</span><span class=\"token keyword\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"Action\"</span><span class=\"token keyword\">:</span> <span class=\"token string\">\"sts:AssumeRole\"</span>,\n        <span class=\"token string\">\"Principal\"</span><span class=\"token keyword\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token string\">\"Service\"</span><span class=\"token keyword\">:</span> <span class=\"token string\">\"states.amazonaws.com\"</span>\n        <span class=\"token punctuation\">}</span>,\n        <span class=\"token string\">\"Effect\"</span><span class=\"token keyword\">:</span> <span class=\"token string\">\"Allow\"</span>,\n        <span class=\"token string\">\"Sid\"</span><span class=\"token keyword\">:</span> <span class=\"token string\">\"StepFunctionAssumeRole\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n  EOF\n<span class=\"token punctuation\">}</span>\n\nresource <span class=\"token string\">\"aws_iam_role_policy\"</span> <span class=\"token string\">\"step_function_policy\"</span> <span class=\"token punctuation\">{</span>\n  name    <span class=\"token operator\">=</span> <span class=\"token string\">\"<span class=\"token variable\">${var.step_function_name}</span>-policy\"</span>\n  role    <span class=\"token operator\">=</span> aws_iam_role.step_function_role.id\n\n  policy  <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;&lt;</span>-EOF\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"Version\"</span><span class=\"token keyword\">:</span> <span class=\"token string\">\"2012-10-17\"</span>,\n    <span class=\"token string\">\"Statement\"</span><span class=\"token keyword\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"Action\"</span><span class=\"token keyword\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">\"lambda:InvokeFunction\"</span>\n        <span class=\"token punctuation\">]</span>,\n        <span class=\"token string\">\"Effect\"</span><span class=\"token keyword\">:</span> <span class=\"token string\">\"Allow\"</span>,\n        <span class=\"token string\">\"Resource\"</span><span class=\"token keyword\">:</span> <span class=\"token string\">\"<span class=\"token variable\">${aws_lambda_function.lambda_function.arn}</span>\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n  EOF\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here we are creating a resource <code class=\"language-text\">aws_sfn_state_machine</code> which is the step function and <code class=\"language-text\">aws_iam_role</code> which is the role that will be used by the step function. </p>\n<p>This step function has only one state <code class=\"language-text\">HelloWorld</code> which is a <strong>Task</strong> type. We have set the <strong>Resource</strong> of the <code class=\"language-text\">HelloWorld</code> state to the ARN of the lambda function using this <code class=\"language-text\">${aws_lambda_function.lambda_function.arn}</code>.</p>\n<p>Once again we are taking the name of the step function from the terraform variable. So add the following terraform code to <code class=\"language-text\">vars.tf</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">variable <span class=\"token string\">\"step_function_name\"</span> <span class=\"token punctuation\">{</span>\n  description <span class=\"token operator\">=</span> <span class=\"token string\">\"The name of the step function.\"</span>\n  <span class=\"token function\">type</span> <span class=\"token operator\">=</span> string\n  default <span class=\"token operator\">=</span> <span class=\"token string\">\"test_step_function\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<h4 id=\"deploy\"><a href=\"#deploy\" aria-label=\"deploy permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Deploy</h4>\n<p>Now that we have defined the infrastructure for an AWS Lambda and an AWS Step Functions in terraform, it is time to deploy and test them. For this reason, create a file <code class=\"language-text\">main.tf</code> inside <code class=\"language-text\">terraform</code> folder and put the below code there.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">provider <span class=\"token string\">\"aws\"</span> <span class=\"token punctuation\">{</span>\n  region  <span class=\"token operator\">=</span> <span class=\"token string\">\"eu-west-1\"</span>\n  profile <span class=\"token operator\">=</span> <span class=\"token string\">\"default\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here we are specifying the provider as <code class=\"language-text\">aws</code> and passing the <code class=\"language-text\">region</code> and <code class=\"language-text\">profile</code>. So finally the directory structure will be as below.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">.</span>\n+-- lambda\n<span class=\"token operator\">|</span>   +-- handler.py\n+-- terraform\n<span class=\"token operator\">|</span>   +-- lambda.tf\n<span class=\"token operator\">|</span>   +-- main.tf\n<span class=\"token operator\">|</span>   +-- step_function.tf\n<span class=\"token operator\">|</span>   +-- vars.tf</code></pre></div>\n<p>At this point we are ready to go, so open up the terminal and run the following commands in it.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">terraform init    <span class=\"token comment\"># it will perform initialization step</span>\nterraform plan    <span class=\"token comment\"># see the execution plan of terraform</span>\nterraform apply   <span class=\"token comment\"># apply the infrastructure in AWS</span></code></pre></div>\n<p>After performing those commands login to your <a href=\"https://console.aws.amazon.com/states/home\" title=\"AWS Step Functions console\">AWS Step Functions console</a> and start the execution of the step function (“which you just deployed”) by clicking the <code class=\"language-text\">Start Execution</code> button.\n<img src=\"/media/step_function_start.png\" alt=\"Start Execution\" title=\"Start Execution\"></p>\n<p>As it is a simple step function, so it will get executed immediately. And you can see the key-value pair that we have set in the lambda handler is showing in the output of the step function.\n<img src=\"/media/step_function_result.png\" alt=\"Execution Result\" title=\"Execution Result\"></p>\n<p>The complete code of this article can be found in <a href=\"https://github.com/nahidsaikat/blog-post-code/tree/master/invoke-aws-lambda-from-aws-step-functions-with-terraform\" title=\"GitHub\">this repository</a>.</p>","fields":{"slug":"/blog/invoke-aws-lambda-from-aws-step-functions-with-terraform/","tagSlugs":["/tag/aws-lambda/","/tag/aws-step-functions/","/tag/serverless/","/tag/infrastructure-as-code/","/tag/terraform/"]},"frontmatter":{"date":"2020-08-31T00:12:03.284Z","description":"AWS Lambda and AWS Step Functions begins a new era in serverless computing. In this article we will build an infrastructure using terraform that will have an AWS Lambda and an AWS step functions running on it.","tags":["AWS Lambda","AWS Step Functions","Serverless","Infrastructure as Code","Terraform"],"title":"Invoke AWS Lambda from AWS Step Functions with Terraform"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/invoke-aws-lambda-from-aws-step-functions-with-terraform/"}}