{"data":{"markdownRemark":{"id":"83e69739-cf41-5f74-9a2b-cea06a972c07","html":"<p><img src=\"/media/pixabay/flask-structure-blueprint.jpg\" alt=\"Structure Your Project with Flask Blueprint\" title=\"Structure Your Project with Flask Blueprint\">\n<a href=\"https://pixabay.com/photos/prague-czech-republic-city-river-1168302/\"><center><span style=\"color:black\">Image Source</span></center></a></p>\n<p>Flask is a lightweight WSGI web application framework based on Python. It is designed in such a way that it will only supply the core components of a web application and it lets the developer choose rest of the things. It leaves all the design and architecture level decisions to the developer.</p>\n<p>As a result it is very easy to get started start with Flask. But day by day when the application gets bigger and more complex, it become very tough to maintain the code base. To resolve this problem Flask comes with <strong>Blueprint</strong>. </p>\n<p><strong>Flask Blueprint</strong> or <strong>Blueprint</strong> for short, is a way to organize the related code base between python modules or packages. In this article we will learn how to use Blueprint to structure a Flask project.</p>\n<p>At the beginning, lets first create a hello world application in Flask. Create a file <code class=\"language-text\">app.py</code> and put the following code in it.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\n\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n\n@app<span class=\"token punctuation\">.</span>route<span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">hello_world</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Hello, World!'</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>What we have done here is that, first we have created an Flask application object by passing the name of the application’s module or package. Then we define a function <code class=\"language-text\">hello_world</code> and associates it with <code class=\"language-text\">&#39;/&#39;</code> url endpoint using route decorator of the <code class=\"language-text\">app</code> object. </p>\n<p>Now open up your terminal and write this command <code class=\"language-text\">python app.py</code> and hit enter. It will run your application on port 5000 of your machine.</p>\n<p>While the application is running, go to <code class=\"language-text\">http://localhost:5000</code> in your favorite browser and see that <code class=\"language-text\">Hello, World!</code> is printed on it.</p>\n<p>As your basic Flask application is up and running. Now create a new file <code class=\"language-text\">views.py</code> and write the following code in it.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Blueprint\n\nindex_blueprint <span class=\"token operator\">=</span> Blueprint<span class=\"token punctuation\">(</span><span class=\"token string\">'index_blueprint'</span><span class=\"token punctuation\">,</span> __name__<span class=\"token punctuation\">)</span>\n\n@index_blueprint<span class=\"token punctuation\">.</span>route<span class=\"token punctuation\">(</span><span class=\"token string\">'/index/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'This is flask blueprint example'</span></code></pre></div>\n<br>\n<p>Here we have done the following things.</p>\n<ul>\n<li>We import <code class=\"language-text\">Blueprint</code> from <code class=\"language-text\">flask</code>.</li>\n<li>Created a Blueprint object and name it <code class=\"language-text\">index_blueprint</code>.</li>\n<li>And associates our <code class=\"language-text\">index</code> function with <code class=\"language-text\">/index/</code> url endpoint using route decorator of <code class=\"language-text\">index_blueprint</code>.</li>\n</ul>\n<p>While creating the <code class=\"language-text\">index_blueprint</code> object, first we have passed the name of the blueprint that will be used in Flask’s routing mechanism. And then we have passed <code class=\"language-text\">__name__</code> as the second argument which will be used by Flask to locate the Blueprint’s resources.</p>\n<p>Now that we have our blueprint object, we need to register it with <code class=\"language-text\">app</code> object. The following code base shows how to register <code class=\"language-text\">index_blueprint</code> with <code class=\"language-text\">app</code> object in <code class=\"language-text\">app.py</code> file.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> views <span class=\"token keyword\">import</span> index_blueprint\n\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span>register_blueprint<span class=\"token punctuation\">(</span>index_blueprint<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">app.register_blueprint</code> is the method we used here to register the blueprint with the <code class=\"language-text\">app</code> object.</p>\n<p>As we have registered our blueprint with the application, it’s time to check if our blueprint is actually working. </p>\n<p>To check that open your terminal and run this command <code class=\"language-text\">python app.py</code>, then go to <code class=\"language-text\">http://localhost/index/</code> in your browser and see that <code class=\"language-text\">This is flask blueprint example</code> is printed.</p>\n<br>\n<p><img src=\"https://media.giphy.com/media/T0WzQ475t9Cw/source.gif\" alt=\"Structure Your Project with Flask Blueprint\" title=\"Structure Your Project with Flask Blueprint\">\n<a href=\"https://media.giphy.com/media/T0WzQ475t9Cw/source.gif\"><center><span style=\"color:black\">Source</span></center></a></p>\n<br>\n<p>We have successfully used <strong>Flask Blueprint</strong> in our project and we have structured our project in different python modules using the Blueprint.</p>\n<p>When the project will grow bigger and bigger that time we can adopt the following project structure to keep it more maintainable.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">project_root/\n|\n|--app.py\n|--app_module/\n    |\n    |--__init__.py\n    |--views.py</code></pre></div>\n<br>\n<p>The complete code of this article can be found at <a href=\"https://github.com/nahidsaikat/Structure-Your-Project-with-Flask-Blueprint.git\" title=\"GitHub\">this repository</a>.</p>","fields":{"slug":"/blog/structure-your-project-with-flask-blueprint/","tagSlugs":["/tag/flask/","/tag/rest-api/"]},"frontmatter":{"date":"2020-04-10T00:12:03.284Z","description":"Blueprint is a way to organize related code in the same module. Blueprint allows us to simplify complex project by dividing it in smaller modules.","tags":["Flask","REST-API"],"title":"Structure Your Project with Flask Blueprint"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/structure-your-project-with-flask-blueprint/"}}