{"data":{"markdownRemark":{"id":"b5b48944-0dd1-56d4-9877-54250bf5841e","html":"<p><img src=\"/media/pixabay/pl-sql-block.png\" alt=\"PL/SQL Block\" title=\"PL/SQL Block\">\n<a href=\"https://pixabay.com/illustrations/cubes-assorted-random-toys-677092/\"><center><span style=\"color:black\">Image Source</span></center></a></p>\n<p>PL/SQL is a block structured language. Everything written in PL/SQL are divided in logical blocks. Each blocks has three parts declaration sections, executable sections and exception handling sections.</p>\n<p><strong>Declaration Section:</strong> This is an optional section. This section contains declaration of variables, constants, cursors, subprograms and other elements necessary in program. <strong>DECLARE</strong> is the keyword that indicates the starts of declaration section.</p>\n<p><strong>Executable Section:</strong> Executable section is the main part of the program. This section start with the keyword <strong>BEGIN</strong> and end with keyword <strong>END</strong>. All the executable statements are placed inside this section. This section should not be empty, it should contains at least null command to indicate nothing should be execute.</p>\n<p><strong>Exception Handling Section:</strong> Exception handling section starts with the keyword <strong>EXCEPTION</strong>. It handles all the exception raises while executing the statements in executable section. It is also an optional section.</p>\n<p>A typical PL/SQL block looks like following.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token constant\">DECLARE</span>\n    <span class=\"token operator\">&lt;</span>declaration section<span class=\"token operator\">></span>\n<span class=\"token keyword\">BEGIN</span>\n    <span class=\"token operator\">&lt;</span>executable section<span class=\"token operator\">></span>\n<span class=\"token constant\">EXCEPTION</span>\n    <span class=\"token operator\">&lt;</span>exception handling section<span class=\"token operator\">></span>\n<span class=\"token keyword\">END</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Here is the hello world program written in PL/SQL block.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">BEGIN</span>\n    <span class=\"token constant\">DBMS_OUTPUT</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PUT_LINE</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'Hello World!'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">EXCEPTION</span></code></pre></div>\n<p>Following is the same hello world program. This time a variable is declared which size is 100 bytes. This variable contains string “Hello World!” and is being used to show output. It also handles exception.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token constant\">DECLARE</span>\n    message <span class=\"token constant\">VARCHAR2</span> <span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span><span class=\"token operator\">=</span> <span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">BEGIN</span>\n    <span class=\"token constant\">DBMS_OUTPUT</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PUT_LINE</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">EXCEPTION</span>\n    <span class=\"token constant\">WHEN</span> <span class=\"token constant\">OTHERS</span>\n    <span class=\"token constant\">THEN</span> <span class=\"token constant\">DBMS_OUTPUT</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PUT_LINE</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'Exception Occurred!'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">END</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Blocks can be nested. Following is the same program but this time we are using nested blocks.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token constant\">DECLARE</span>\n    message_one <span class=\"token constant\">VARCHAR2</span> <span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span><span class=\"token operator\">=</span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">BEGIN</span>\n    <span class=\"token constant\">DECLARE</span>\n        message_two <span class=\"token constant\">VARCHAR2</span> <span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span><span class=\"token operator\">=</span> message_one <span class=\"token operator\">||</span> <span class=\"token string\">' World!'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">BEGIN</span>\n        <span class=\"token constant\">DBMS_OUTPUT</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PUT_LINE</span><span class=\"token punctuation\">(</span>message_two<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">END</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">EXCEPTION</span>\n    <span class=\"token constant\">WHEN</span> <span class=\"token constant\">OTHERS</span>\n    <span class=\"token constant\">THEN</span> <span class=\"token constant\">DBMS_OUTPUT</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PUT_LINE</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'Exception Occurred!'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">END</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>There are many tools available to run PL/SQL programs. SQL<em>PLUS is one of the tool to run PL/SQL program provided by Oracle. To execute the above programs in SQL</em>PLUS first connect with database using the command <strong>CONNECT database_name</strong>. After providing password you will be connected with database_name. You should run <strong>SET SERVEROUTPUT ON</strong> command to see output on screen. Then type the program in SQL<em>PLUS command prompt at the end type slash(/) to tell SQL</em>PLUS to execute. When executed you will see Hello World! written on the screen.</p>\n<p>Following figure shows executing the hello world example in SQL*PLUS.</p>\n<p><img src=\"/media/pl_sql/hello-world.png\" alt=\"Encapsulation\" title=\"Hello World in PL/SQL\">\n<strong><center>Figure: Executing PL/SQL Program in SQL*PLUS.</center></strong></p>\n<p><a href=\"https://www.nahidsaikat.com/tag/oracle-db/\" title=\"Oracle DB - Nahid Saikat\">Visit here</a> for other oracle database related post.\nLearn Oracle Database basics from <a href=\"http://www.oracle.com/webfolder/technetwork/tutorials/obe/db/12c/r1/odb_quickstart/odb_quick_start.html\" title=\"Oracle Database Quick Start\">here</a>.</p>","fields":{"slug":"/blog/2018/01/29/oracle-pl-sql-blocks/","tagSlugs":["/tag/pl-sql/","/tag/oracle-db/","/tag/language/"]},"frontmatter":{"date":"2018-01-29T22:12:03.284Z","description":"PL/SQL is a block structured language. Everything written in PL/SQL are divided in logical blocks. Each blocks has three parts declaration sections, executable sections and exception handling sections.","tags":["PL/SQL","Oracle DB","Language"],"title":"Oracle PL/SQL Blocks"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2018/01/29/oracle-pl-sql-blocks/"}}