{"data":{"markdownRemark":{"id":"c92d78fa-f7c7-5f19-8b6f-b85959045383","html":"<p><img src=\"/media/unsplash/process-aws-dynamodb-streams-by-aws-lambda.jpg\" alt=\"Process AWS DynamoDB Streams by AWS Lambda with Terraform\" title=\"Process AWS DynamoDB Streams by AWS Lambda with Terraform\"></p>\n<center><span>Photo by <a href=\"https://unsplash.com/@kaitduffey17?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Kaitlin Duffey</a> on <a href=\"https://unsplash.com/?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span>\n</center>\n<br>\n<p><a href=\"https://aws.amazon.com/dynamodb/\" title=\"AWS DynamoDB\">AWS DynamoDB</a> is a <code class=\"language-text\">key-vlaue</code> based NoSQL Database as a service(DBaaS) provided by Amazon Web Services. It offers a fully managed multi region database with build-in security, backup and restore facilities. It also has in-memory caching for internet-scale applications.</p>\n<p>On the other hands, <a href=\"https://aws.amazon.com/lambda/\" title=\"AWS Lambda\">AWS Lambda</a> is a serverless compute service offered by Amazon Web Services. AWS Lambda allow you to run code without provisioning or managing servers so that you can focus only on code.</p>\n<p>Both of the services are very useful and they solve lots of problems we face in our daily software development process. In this article we will discuss how we can use both of the services together using DynamoDB streams.</p>\n<p>DynamoDB streams is a feature that allows us to capture the events in DynamoDB tables. DynamoDB Streams stores “creates”, “updates” and “deletes” events from a DynamoDB tables when enabled. It maintains ordered flow of information and ensures that each stream record appears exactly once in the stream. We can set an AWS Lambda to get triggered when an item appears in the stream and precess the data.</p>\n<p>For that purpose let’s create a DynamoDB table using terraform.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">resource &quot;aws_dynamodb_table&quot; &quot;dynamodb_table&quot; {\n  name             = &quot;lambda-dynamodb-stream&quot;\n  billing_mode     = &quot;PAY_PER_REQUEST&quot;\n  hash_key         = &quot;Id&quot;\n  stream_enabled   = true\n  stream_view_type = &quot;NEW_AND_OLD_IMAGES&quot;\n\n  attribute {\n    name = &quot;Id&quot;\n    type = &quot;S&quot;\n  }\n}</code></pre></div>\n<p>One thing to notice here is that we are setting <code class=\"language-text\">stream_enabled  = true</code> which will enable the stream in the table. By default the stream is not enabled so we needs to enable it by ourselfs.</p>\n<p>Next we will create a lambda function. The terraform code that will create a lambda function is as follow.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">resource &quot;aws_lambda_function&quot; &quot;lambda_function&quot; {\n  function_name    = &quot;process-dynamodb-records&quot;\n  filename         = data.archive_file.lambda_zip_file.output_path\n  source_code_hash = data.archive_file.lambda_zip_file.output_base64sha256\n  handler          = &quot;handler.handler&quot;\n  role             = aws_iam_role.lambda_assume_role.arn\n  runtime          = &quot;python3.8&quot;\n\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n\ndata &quot;archive_file&quot; &quot;lambda_zip_file&quot; {\n  output_path = &quot;${path.module}/lambda_zip/lambda.zip&quot;\n  source_dir  = &quot;${path.module}/../lambda&quot;\n  excludes    = [&quot;__init__.py&quot;, &quot;*.pyc&quot;]\n  type        = &quot;zip&quot;\n}</code></pre></div>\n<p>As we have the DynamoDB table and Lambda function created on our hand, now we needs to create an event source mapping so that this lambda gets triggered when DynamoDB stream has data in it.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">resource &quot;aws_lambda_event_source_mapping&quot; &quot;example&quot; {\n  event_source_arn  = aws_dynamodb_table.dynamodb_table.stream_arn\n  function_name     = aws_lambda_function.lambda_function.arn\n  starting_position = &quot;LATEST&quot;\n}</code></pre></div>\n<p>The lambda also requires an <code class=\"language-text\">IAM</code> role so that it can reads the stream data.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">resource &quot;aws_iam_role&quot; &quot;lambda_assume_role&quot; {\n  name               = &quot;lambda-dynamodb-role&quot;\n  assume_role_policy = &lt;&lt;EOF\n{\n  &quot;Version&quot;: &quot;2012-10-17&quot;,\n  &quot;Statement&quot;: [\n    {\n      &quot;Action&quot;: &quot;sts:AssumeRole&quot;,\n      &quot;Principal&quot;: {\n        &quot;Service&quot;: &quot;lambda.amazonaws.com&quot;\n      },\n      &quot;Effect&quot;: &quot;Allow&quot;,\n      &quot;Sid&quot;: &quot;LambdaAssumeRole&quot;\n    }\n  ]\n}\nEOF\n}\n\nresource &quot;aws_iam_role_policy&quot; &quot;dynamodb_read_log_policy&quot; {\n  name   = &quot;lambda-dynamodb-log-policy&quot;\n  role   = aws_iam_role.lambda_assume_role.id\n  policy = &lt;&lt;EOF\n{\n  &quot;Version&quot;: &quot;2012-10-17&quot;,\n  &quot;Statement&quot;: [\n    {\n        &quot;Action&quot;: [ &quot;logs:*&quot; ],\n        &quot;Effect&quot;: &quot;Allow&quot;,\n        &quot;Resource&quot;: [ &quot;arn:aws:logs:*:*:*&quot; ]\n    },\n    {\n        &quot;Action&quot;: [ &quot;dynamodb:BatchGetItem&quot;,\n                    &quot;dynamodb:GetItem&quot;,\n                    &quot;dynamodb:GetRecords&quot;,\n                    &quot;dynamodb:Scan&quot;, We will have the recores inside of the lambda function in event `object`. We can also configure the stream to capture additional data such as &quot;before&quot; and &quot;after&quot; images of modified items.\n                    &quot;dynamodb:Query&quot;,\n                    &quot;dynamodb:GetShardIterator&quot;,\n                    &quot;dynamodb:DescribeStream&quot;,\n                    &quot;dynamodb:ListStreams&quot; ],\n        &quot;Effect&quot;: &quot;Allow&quot;,\n        &quot;Resource&quot;: [\n          &quot;${aws_dynamodb_table.dynamodb_table.arn}&quot;,\n          &quot;${aws_dynamodb_table.dynamodb_table.arn}/*&quot;\n        ]\n    }\n  ]\n}\nEOF\n}</code></pre></div>\n<p>And the final thing that we will require is the handler of the lambda function.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> logging\n\nLOGGER <span class=\"token operator\">=</span> logging<span class=\"token punctuation\">.</span>getLogger<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nLOGGER<span class=\"token punctuation\">.</span>setLevel<span class=\"token punctuation\">(</span>logging<span class=\"token punctuation\">.</span>INFO<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> record <span class=\"token keyword\">in</span> event<span class=\"token punctuation\">[</span><span class=\"token string\">'Records'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        LOGGER<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">[</span><span class=\"token string\">'eventID'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        LOGGER<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">[</span><span class=\"token string\">'eventName'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        LOGGER<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">[</span><span class=\"token string\">'dynamodb'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> event</code></pre></div>\n<p>We will have the records inside of the lambda function in <code class=\"language-text\">event</code> object. We can also configure the stream to capture additional data such as “before” and “after” images of modified items.</p>\n<p>When everything is set up, run the following commands in your terminal to deploy the insfrastructure in AWS. Make sure that you have <code class=\"language-text\">default</code> AWS profile is already set.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">terraform init\nterraform plan\nterraform apply</code></pre></div>\n<p>The complete code of this article can be found in <a href=\"https://github.com/nahidsaikat/blog-post-code/tree/master/process-aws-dynamodb-streams-by-aws-lambda-with-terraform\" title=\"GitHub\">this repository</a>.</p>","fields":{"slug":"/blog/process-aws-dynamodb-streams-by-aws-lambda-with-terraform/","tagSlugs":["/tag/aws-lambda/","/tag/aws-dynamo-db/","/tag/serverless/","/tag/infrastructure-as-code/","/tag/terraform/"]},"frontmatter":{"date":"2021-02-02T00:12:03.284Z","description":"This article discusses how we can tregger a AWS Lambda function from DynamoDB tables using DynamoDB Streams.","tags":["AWS Lambda","AWS DynamoDB","Serverless","Infrastructure as Code","Terraform"],"title":"Process AWS DynamoDB Streams by AWS Lambda with Terraform"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/process-aws-dynamodb-streams-by-aws-lambda-with-terraform/"}}